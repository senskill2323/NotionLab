Description totale de l'espace administrateur :

Résumé

Synthèse croisée des sous-agents Règles/UI/Data : cartographie des docs rules/00-architecture & rules/07-Fonctionnalités, inventaire UI (src/pages/admin, src/components/admin) et analyse Supabase (RPC, tables, realtime, Edge).
L’espace admin est orchestré par AdminDashboardPage (onglets dynamiques via admin_dashboard_tabs/admin_modules_registry) et les panneaux spécialisés src/components/admin/* s’affichent selon requiredPermission (AdminDashboardPage.jsx:196, :228).
Les routes /admin/* sont protégées par ProtectedRoute et branchées dans src/App.jsx:1, avec héritage legacy via src/pages/AdminPage.jsx:1.
L’expérience repose sur Supabase (PostgREST + Edge) pour CRUD tickets, utilisateurs, ressources, thèmes, formations et builder, avec notifications temps réel pour KPI, tickets, formations et contenu.

Stack

React 18 + Vite, React Router 6, TanStack Query singleton (src/App.jsx:1, src/lib/reactQueryClient.js:1).
UI Tailwind + shadcn/Radix, lucide-react, framer-motion, react-hook-form, use-debounce, TipTap/React Flow pour sous-modules builder (src/components/admin/UserManagementPanel.jsx:1, src/components/admin/formation-live/AdminKanbanView.jsx:1).
Supabase JS v2 encapsulé (src/lib/customSupabaseClient.js:1), bus useSessionRefresh (src/lib/sessionRefreshBus.js:1), storages (bucket resources) (src/components/admin/NewResourceDialog.jsx:1).
Contextes : useAuth, usePermissions, ComponentStateProvider, ResourceCreationProvider, BuilderCatalogProvider (src/App.jsx:60).

API publique

src/pages/AdminDashboardPage.jsx:1 (default) : calcule KPI (supabase.rpc('get_admin_dashboard_kpis')) et assemble composants via admin_modules_registry; dépend de useAuth, usePermissions, useToast, framer-motion.
src/components/dashboard/AdminDashboardContent.jsx:1 (default) : carte KPI temps réel (supabase.rpc('get_admin_dashboard_kpis'), channels tickets/courses).
src/pages/AdminPage.jsx:1 (legacy) : navigation statique multi-onglets.
Gestion utilisateurs : src/components/admin/UserManagementPanel.jsx:1, src/pages/admin/CreateUserPage.jsx:1, src/pages/admin/ManageUserPage.jsx:1; utilisent supabase.functions (users-search, invite-user, create-user-with-role, delete-user-full, set-user-password), useAuth, useSessionRefresh, react-hook-form.
Tickets : src/components/admin/TicketManagementPanel.jsx:1, src/pages/admin/ManageTicketPage.jsx:1; PostgREST direct sur tickets, ticket_replies, realtime canal public, dépendances UI shadcn Tabs/Select.
Contenu & builder : src/components/admin/HomeBlockManagementPanel.jsx:1, src/pages/admin/EditHomeBlockPage.jsx:1, src/components/admin/home-blocks/*, src/pages/admin/DashboardEditorPage.jsx:1, src/components/admin/BuilderManagementPanel.jsx:1.
Ressources & thèmes : src/components/admin/ResourcesPanel.jsx:1, src/pages/admin/ResourcesPage.jsx:1, src/components/admin/ThemePanel.jsx:1, src/components/admin/theme/*.
Formations/parcours : src/components/admin/FormationManagementPanel.jsx:1, src/components/admin/formation-management/*, src/components/admin/UserFormationSubmissionsPanel.jsx:1, src/components/admin/formation-live/*.
Gouvernance : src/pages/admin/RolesPermissionsPage.jsx:1, src/pages/admin/ModuleManagerPage.jsx:1, src/pages/admin/TabsEditorPage.jsx:1, src/components/admin/ActionLogsPanel.jsx:1, src/pages/admin/ComponentManagerPage.jsx:1.
Static/blueprint : src/components/admin/StaticPageManagementPanel.jsx:1, src/pages/admin/EditStaticPage.jsx:1, src/pages/admin/BlueprintPaletteAdminPage.jsx:1.

Structure (fichiers)

Pages racine : src/pages/AdminDashboardPage.jsx, src/pages/AdminPage.jsx, routes /admin/... dans src/App.jsx:92-141.
Pages dédiées : src/pages/admin/*.jsx (création/édition user, tickets, modules, tabs, ressources, formations, home blocks, static).
Panneaux UI : src/components/admin/*.jsx (UserManagementPanel, TicketManagementPanel, ResourcesPanel, ThemePanel, AssistantSettingsPanel, ActionLogsPanel, etc.).
Sous-dossiers : src/components/admin/home-blocks/*, src/components/admin/manage-user/*, src/components/admin/formation-management/*, src/components/admin/formation-live/*, src/components/admin/theme/*.
Dépendances cross : src/hooks/useSubmissions.js, src/lib/sessionRefreshBus.js, src/contexts/SupabaseAuthContext.jsx, src/contexts/PermissionsContext.jsx.

Dépendances

Contextes globaux useAuth, usePermissions, useSessionRefresh, useSubmissions (hook builder live).
UI/UX : shadcn components (Card, Tabs, Table, Dialog, Select, AlertDialog, Badge, Button), framer-motion animations, lucide-react icônes.
Formulaire : react-hook-form + Controller pour BlueprintPaletteAdminPage, EditHomeBlockPage, ManageUserPage, AssistantSettingsPanel, UserProfileForm.
Outils : useDebounce (filtres utilisateurs), papaparse (exports tickets), date-fns? (non relevé), dompurify? (non direct).
Edge Supabase : assistant-voice-preview, users-search, invite-user, delete-user-full, create-user-with-role, set-user-password, update-dashboard-layout, manage-content-block.

Flux de données

Configuration dashboard : AdminDashboardPage → admin_dashboard_tabs & admin_modules_registry (loading, filtering par permission) → mapping adminComponentMap.
KPI : AdminDashboardPage & AdminDashboardContent → RPC get_admin_dashboard_kpis → mise à jour UI + watchers realtime.
Gestion utilisateurs : UserManagementPanel → Edge users-search (listing), invite-user (invitation), PostgREST user_types, courses ; ManageUserPage → multiples supabase.from (profiles, user_formations, courses) + Edge (set-user-password, delete-user-full, notify-user-account-activated).
Tickets : Panneau & page d’édition → tickets + ticket_replies (lectures/updates direct), jointures profiles, calcul hasNew*Reply, navigation.
Ressources : ResourcesPanel/ResourcesPage → resources, resource_assignments, builder_families/subfamilies, storage resources; duplication, update, suppression.
Home blocks : HomeBlockManagementPanel & HomeBlockList → RPC (home_blocks_move, _set_status, _duplicate, _set_title, _delete_hard) + content_blocks list, manage-content-block Edge pour contenus HTML.
Thèmes : ThemePanel & theme/* → themes table (CRUD), RPC set_active_theme.
Formations/parcours : FormationManagementPanel/FormationListView/FormationCard → RPC get_admin_formations_and_submissions, approve_*, reject_*, tables courses, formation-images, formation_module_statuses.
Builder live : UserFormationSubmissionsPanel, AdminKanbanView, UserKanbanDashboard, OnboardingQuestionsAdminPanel → formation_submissions, kanban_user_modules_v1, training_onboarding_* tables, realtime watchers par utilisateur.
Gouvernance : RolesPermissionsPage → role_permissions, user_types (upsert), ModuleManagerPage → modules_registry (activation), ComponentManagerPage → component_rules, TabsEditorPage → admin_dashboard_tabs, ActionLogsPanel → action_logs.
Assistant : AssistantSettingsPanel → assistant_settings, assistant_limits, assistant_metrics, Edge assistant-voice-preview.

État & effets

États React (useState/useMemo/useCallback) pour filtres, tri, pagination, dialogues (e.g., UserManagementPanel.jsx:52, TicketManagementPanel.jsx:14).
Effets useEffect orchestrant fetch initial + cleanup (channels supabase, timers) (AdminDashboardPage.jsx:208, AdminDashboardContent.jsx:30, TicketManagementPanel.jsx:98).
Realtime → supabase.channel avec cleanup removeChannel.
Hooks custom : useSubmissions (fetch + mutations), useSessionRefresh (invalidation), useCountries (list pays).
Form controls via react-hook-form (validation, reset) et Controller pour inputs complexes (ManageUserPage.jsx:7, AssistantSettingsPanel.jsx:2).

I/O DB (PostgREST/RPC/SQL)

Tables : admin_dashboard_tabs, admin_modules_registry (AdminDashboardPage.jsx:196), tickets & ticket_replies (TicketManagementPanel.jsx:31, ManageTicketPage.jsx:70), profiles, user_types, user_formations, courses, formation-images, formation_module_statuses, builder_families, builder_subfamilies, resources, resource_assignments, themes, content_blocks, component_rules, role_permissions, action_logs, blueprint_palette_families, blueprint_palette_items, admin_dashboard_layout? (via Edge), assistant_settings/limits/metrics.
RPC : get_admin_dashboard_kpis, get_admin_formations_and_submissions, home_blocks_move, home_blocks_set_status, home_blocks_duplicate, home_blocks_set_title, home_blocks_create_html, home_blocks_delete_hard, home_blocks_set_title, home_blocks_move, approve_user_parcours_submission, revert_submission_to_pending, reject_user_parcours_submission, get_user_login_history, get_user_login_history_count.
Edge Functions : update-dashboard-layout, manage-content-block, users-search, invite-user, create-user-with-role, delete-user-full, set-user-password, assistant-voice-preview, notify-user-account-activated.
Storage : bucket resources (NewResourceDialog.jsx:120).

Realtime (listen/broadcast)

admin-dashboard-kpis channel → tickets, courses updates (AdminDashboardPage.jsx:208).
admin-dashboard-config-changes → admin_dashboard_tabs, admin_modules_registry (AdminDashboardPage.jsx:214).
admin-dashboard-ticket-activity → ticket_replies, tickets (AdminDashboardPage.jsx:224).
public:tickets → TicketManagementPanel.jsx:118, AdminDashboardContent.jsx:36.
public:ticket_replies:ticket_id=eq.* + public:tickets:id=eq.* → ManageTicketPage.jsx:80-92.
public:courses:custom → BuilderManagementPanel.jsx:35.
Formation live per user : AdminKanbanView.jsx:312, UserKanbanDashboard.jsx.
Resources : supabase.channel('public:resources_panel') (ResourcesPanel.jsx:36).

Sécurité (RLS, XSS, CSRF)

ACL UI : ProtectedRoute exige requiredPermission (App routes), AdminDashboardPage filtre hasPermission.
Lacunes critiques : RLS non activée pour tickets/ticket_replies (confirmé rules/07-Fonctionnalités/Gestion des tickets) → PostgREST direct accessible via clé anon (modification cross-tenant possible).
Mises à jour directes côté client sur profiles, themes, component_rules, admin_dashboard_tabs, modules_registry sans RPC dédiée ni check (besoin de policies/SECURITY DEFINER).
Edge functions utilisent service-role, mais retours JSON renvoyés au client sans masquage (vérifier delete-user-full, users-search).
XSS : UI React + TipTap sanitisation? StaticPage & HomeBlock manipulent HTML, rely sur dompurify (à vérifier). CSV export (Ticket) susceptible d’injection formule.
CSRF : requests supabase signées (JWT); toutefois Edge functions devraient vérifier hasPermission côté serveur.