Stack

Vite + React 18 + React Router 6 pour le shell SPA package.json:6, src/App.jsx:78.
TanStack Query configuré en singleton (refetchOnWindowFocus=false) src/lib/reactQueryClient.js:6.
UI: Tailwind/Tailwind Merge, Radix primitives, Lucide, Framer Motion package.json:23.
Supabase JS 2, PostgREST, Storage, Edge Functions encapsulés src/lib/customSupabaseClient.js:1, Supabase/functions/.
TipTap, DnD Kit, React Flow pour le builder/contenu riche package.json:27.


API publique (exports/props/hooks)

useAuth / AuthProvider expose session, profils enrichis, signIn/out, notifier owner src/contexts/SupabaseAuthContext.jsx:9, src/contexts/SupabaseAuthContext.jsx:332.
usePermissions / PermissionsProvider fournit garde fine, cache TTL et fallback src/contexts/PermissionsContext.jsx:17, src/contexts/PermissionsContext.jsx:43.
useAssistant (drawer state, startCall, toggleVideo, quotas, metrics) src/contexts/AssistantContext.jsx:87, src/components/assistant/AssistantDrawer.jsx:71.
useBuilderCatalog offre catalogue hiérarchique + mutations optimistes src/contexts/BuilderCatalogContext.jsx:17, src/contexts/BuilderCatalogContext.jsx:102.
Hooks spécialisés: usePerfectNegotiation (RTCPeerConnection) src/hooks/usePerfectNegotiation.js:7, useDashboardLayout (éditeur d’agencement) src/hooks/useDashboardLayout.js:11, useSubmissions (workflow formations) src/hooks/useSubmissions.js:7.
ManagedComponent applique règles d’affichage dynamiques via component_rules src/components/ManagedComponent.jsx:5, src/contexts/ComponentStateContext.jsx:20.


Structure (fichiers)

src/App.jsx compose providers (Auth, Permissions, Assistant, etc.) + layout principal src/App.jsx:47.
src/pages/ sépare écrans public, client, admin (ex. AdminDashboardPage.jsx, DashboardPage.jsx) src/pages/AdminDashboardPage.jsx:1, src/pages/DashboardPage.jsx:1.
src/components/dashboard/ contient modules clients/admin et éditeur src/components/dashboard/ClientDashboardContent.jsx:1, src/components/dashboard/editor/.
src/contexts/, src/lib/, src/hooks/ regroupent respectivement providers, API Supabase, utilitaires WebRTC/RPC src/lib/trainingOnboardingApi.js:3.
Supabase/functions/ héberge 13 edge functions (mint key, content blocks, users) Supabase/functions/assistant-mint-key, Supabase/functions/users-search.
Docs internes sous rules/ (architecture, modules, RLS) rules/00-architecture/readme.mdc:41, rules/Fonctionnement des modules/Formation:7.


Dépendances internes/externes

Externes critiques: @supabase/supabase-js, @tanstack/react-query, @radix-ui UI, framer-motion, dompurify, Papaparse, uuid package.json:23.
Builder/éditeur appuient sur @dnd-kit, reactflow, TipTap (@tiptap/*) package.json:12.
Contexte métier: ComponentStateContext pour toggles UI dynamiques src/contexts/ComponentStateContext.jsx:10, ManagedComponent pour injection ciblée src/components/ManagedComponent.jsx:5.
Services internes: assistantApi (settings/limits/metrics) src/lib/assistantApi.js:1, trainingOnboardingApi (sections, réponses, notifications email) src/lib/trainingOnboardingApi.js:3.
Scripts utilitaires (SQL runner, audit tools) scripts/run-sql.js, tools/audit_step1.mjs.


Flux de données

Auth: Supabase session -> enrichissement profiles -> invalidation QueryClient et bus d’événements src/contexts/SupabaseAuthContext.jsx:78, src/lib/sessionRefreshBus.js:5.
Permissions: cache local TTL, fetch role_permissions, fallback selon route src/contexts/PermissionsContext.jsx:43, src/contexts/PermissionsContext.jsx:149.
Client dashboard: fetch modules_registry, layout via edge get-dashboard-layout puis rendu conditionnel src/components/dashboard/ClientDashboardContent.jsx:96, src/components/dashboard/ClientDashboardContent.jsx:105.
Admin dashboard: RPC get_admin_dashboard_kpis, requêtes admin_dashboard_tabs/admin_modules_registry, notifications activity tickets src/pages/AdminDashboardPage.jsx:175, src/pages/AdminDashboardPage.jsx:192.
Formations & onboarding: RPC search_user_formation_submissions, builder catalog, training onboarding API (sections/questions/responses) src/hooks/useSubmissions.js:20, src/lib/trainingOnboardingApi.js:137.
Ressources & tickets: RPC get_user_resources_with_ratings + storage, filtrage tickets par utilisateur src/components/dashboard/modules/ResourcesPanel.jsx:80, src/pages/TicketsPage.jsx:36.

État & effets

QueryClient singleton + staleTime global src/lib/reactQueryClient.js:6.
Contextes orchestrent effets : AuthProvider gère tab visibility, timers, invalidations src/contexts/SupabaseAuthContext.jsx:120; PermissionsProvider observe route, session refresh, visibility src/contexts/PermissionsContext.jsx:186.
ComponentStateContext écoute Realtime + visibility pour rafraîchir règles UI src/contexts/ComponentStateContext.jsx:34.
ThemeContext applique thème fallback immédiat puis RPC get_active_theme_tokens src/contexts/ThemeContext.jsx:57, src/contexts/ThemeContext.jsx:112.
AssistantContext synchronise états d’appel, quotas, timers, metrics, gère WebRTC via usePerfectNegotiation src/contexts/AssistantContext.jsx:87, src/hooks/usePerfectNegotiation.js:31.
Layout preferences et builder state isolés via providers/hook (useLayoutPreferences, useDashboardLayout) src/contexts/LayoutPreferencesContext.jsx:7, src/hooks/useDashboardLayout.js:11.
I/O DB (PostgREST/RPC/SQL)

Auth/profile: 

profiles select/upsert, email checks, notification owner src/contexts/SupabaseAuthContext.jsx:78, src/contexts/SupabaseAuthContext.jsx:249, src/contexts/SupabaseAuthContext.jsx:332.
Permissions: role_permissions read, cache invalidation src/contexts/PermissionsContext.jsx:149.
Dashboard data: modules_registry, edge get-dashboard-layout, update-dashboard-layout src/components/dashboard/ClientDashboardContent.jsx:96, src/pages/admin/DashboardEditorPage.jsx:80.
Formations: RPC search_user_formation_submissions, approve_user_parcours_submission, submit_course_for_validation, onboarding APIs src/hooks/useSubmissions.js:20, src/components/dashboard/modules/FormationsPanel.jsx:31, src/lib/trainingOnboardingApi.js:187.
Admin ops: users-search, create-user-with-role, delete-user-full, set-user-password src/components/admin/UserManagementPanel.jsx:115, src/pages/admin/CreateUserPage.jsx:63, src/components/admin/UserManagementPanel.jsx:455, src/pages/admin/ManageUserPage.jsx:128.
Tickets/ressources: CRUD sur tickets, ticket_replies, resources, storage buckets resources, avatars, forum_attachments src/pages/TicketsPage.jsx:36, src/components/dashboard/modules/ResourcesPanel.jsx:80, src/components/dashboard/modules/ResourcesPanel.jsx:135, src/components/account/AvatarUpload.jsx:82.
Notifications: Edge notify-training-onboarding, assistant-mint-key, assistant-voice-preview src/lib/trainingOnboardingApi.js:310, src/contexts/AssistantContext.jsx:298, src/components/admin/AssistantSettingsPanel.jsx:171.

Realtime (listen/broadcast)

Admin dashboard KPI/config/ticket watchers via channels admin-dashboard-kpis, admin-dashboard-config-changes, admin-dashboard-ticket-activity src/pages/AdminDashboardPage.jsx:220, src/pages/AdminDashboardPage.jsx:232, src/pages/AdminDashboardPage.jsx:239.
Client ressources & ratings: channel user-resources-channel-${user.id} + storage sync src/components/dashboard/modules/ResourcesPanel.jsx:106.
Admin ressources panel public:resources_panel pour broadcasts src/components/admin/ResourcesPanel.jsx:63.
Component toggles & builder catalog via public:component_rules et builder-catalog-changes src/contexts/ComponentStateContext.jsx:42, src/contexts/BuilderCatalogContext.jsx:60.
Builder drag/drop persiste via RPC + local state (no live channel) src/hooks/useDashboardLayout.js:90.
Formation Kanban realtime décrit dans règles (RLS activée) rules/Fonctionnement des modules/Formation:7.


Sécurité (RLS, XSS, CSRF)

RLS actif sur formations, onboarding, assistant, static pages selon doc rules/00-architecture/readme.mdc:41, rules/Fonctionnement des modules/Formation:7; le front respecte eq('user_id', …) pour limiter accès src/pages/TicketsPage.jsx:43, src/components/dashboard/modules/ResourcesPanel.jsx:80.
Routes protégées selon statut, type, permissions, avec fallback login ou dashboard src/components/ProtectedRoute.jsx:7, src/components/ClientOnlyRoute.jsx:7.
Contenu HTML public nettoyé via DOMPurify (home, static pages, homepage panel) src/pages/HomePage.jsx:57, src/pages/StaticPage.jsx:98, src/components/dashboard/modules/HomepagePanel.jsx:102; mais ViewResourceDialog rend du HTML sans sanitisation => risque XSS si une ressource interne contient du script src/components/dashboard/modules/ViewResourceDialog.jsx:26.
Client Supabase injecte apikey côté fetch et gère timeouts pour résilience, pas de service-role exposée src/lib/customSupabaseClient.js:34, src/lib/customSupabaseClient.js:118.
Aucune protection CSRF spécifique nécessaire (toutes requêtes via Supabase JS avec JWT) mais dépend de politiques RLS ; vérifier formulaires multi-onglets (tickets) pour double soumission.
Assistant quotas empêchent abus (minutes/session/images) côté client + RLS/Edge functions pour gouvernance src/contexts/AssistantContext.jsx:127, rules/00-architecture/readme.mdc:55.
Possible next steps: 1) Sanitize ou restreindre resource.content avant rendu (ajouter DOMPurify côté client ou filtrage SQL). 2) Vérifier RLS pour nouvelles tables (p.ex. component_rules, content_blocks) et couvrir tests automatisés RPC. 3) Documenter edge functions déployées (env/API keys) et s’assurer que .env.local reste non exposé.

Liste des Modules Client:

- client_training_preferences — label « Préférences de formation », expose le résumé/onboarding côté dashboard client. Initialisé dans Supabase/migrations/2025-09-20_training_onboarding_form.sql.
- client_ai_assistant — label « Assistant IA », panneau assistant temps réel pour les clients. Ajouté via Supabase/migrations/2025-09-25_assistant_realtime_module.sql.


Liste des Modules Admin:

- training_onboarding_questions_admin — label « Formulaire d’onboarding », composant OnboardingQuestionsAdminPanel (onglet user_submissions). Créé dans 2025-09-20_training_onboarding_form.sql.
- onboarding_preferences_form — composant OnboardingQuestionsAdminPanel positionné dans l’onglet preferences_form (migration 2025-09-21_admin_move_onboarding_to_new_tab.sql).
- admin_assistant_settings — label « Paramétrage Assistant IA », composant AssistantSettingsPanel, onglet ai_assistant (2025-09-25_admin_assistant_settings_module.sql).
 -admin_static_pages — label « Pages statiques », composant StaticPageManagementPanel, onglet static_pages (2025-09-30_static_pages_module.sql).



Les fonctionnalités sur le site internet: 

- Les formations: Le module “parcours de formation” relie des cours Supabase (standard ou custom) aux soumissions client. Une fois approuvées, ces soumissions génèrent automatiquement des cartes Kanban partagées entre clients et administrateurs pour suivre l’avancement module par module. L’architecture distingue un catalogue public (homepage), un dashboard client (inscriptions, statut, Kanban) et une console admin (gestion du catalogue, revue et Kanban global). Les statuts sont stockés dans formation_module_statuses sous RLS, diffusés en temps réel par Supabase, et peuplés par un trigger dès qu’une soumission passe en “approved/live”. Les clients accèdent à leurs cartes via la vue kanban_user_modules_v1, enrichie côté front par les métadonnées des builder_modules. L’onboarding de formation s’appuie sur des tables dédiées (sections, questions, réponses, NPS) et une API React Query. Côté admin, un panneau agrège cours et soumissions via RPC, propose filtres, duplication/suppression, et un mini workflow d’approbation (approve/revert/reject). La vue Kanban admin recharge les cartes via RPC, persiste le drag-and-drop et affiche le brief d’onboarding. Côté client, un panneau réunit formations live et brouillons, gère l’inscription ou la soumission custom, verrouille les statuts une fois validés, et offre un Kanban temps réel. La homepage expose jusqu’à quatre parcours “live” verrouillés côté admin.

- Assistant IA: Accès depuis le bouton nav nav:assistant et le module dashboard client_ai_assistant. Côté React, AssistantProvider (wrappé dans App.jsx) expose useAssistant() et pilote toute la négociation WebRTC via Perfect Negotiation (pair « polite »), la création/fermeture de la RTCPeerConnection et le DataChannel utilisé par « Montrez-lui » (envoi d’images). Aucun composant ne crée de connexion directe : on n’ajoute que des handlers via setHandlers. Le backend Supabase fournit la config et la gouvernance : tables assistant_settings (paramètres), assistant_limits (quotas par utilisateur) et assistant_metrics (journal de sessions). L’Edge Function assistant-mint-key émet une clé Realtime éphémère pour OpenAI, renvoie les ice_servers et des flags ; aucun secret n’est stocké côté client. Toute session démarre par supabase.functions.invoke('assistant-mint-key', …) (CORS POST, OPTIONS). Les gardes locales (minutes/jour, sessions concurrentes, images/session) se synchronisent avec assistant_limits via ensureAssistantLimits() et updateAssistantLimits() ; les surcharges se règlent en SQL. Chaque session écrit puis met à jour assistant_metrics (insertAssistantMetric/updateAssistantMetric : durée, images, bytes up/down, erreurs). UX : AssistantPanel.jsx affiche l’état et ouvre AssistantDrawer.jsx, qui gère Appeler/Raccrocher/Webcam/« Montrez-lui ». Tout nouveau composant doit consommer useAssistant() et respecter callState, quotaError, configLoading.

- La gestion des utilisateurs:
- Les invitations sur la plateforme:
- la suppresion d'un compte: 
- La gestion des bloques: 
- La gestion des tickets:
- le forum:


List des tables publiques Supabase et à quoi elles servent: 

action_logs : journalise chaque action (acteur, cible, contexte, états JSON) pour l’audit applicatif (sql/create_action_logs_table.sql:2).
admin_dashboard_tabs : catalogue les onglets du back-office (tab_id, label, icône, permissions, placement) pour structurer la navigation admin (Supabase/migrations/2025-09-21_admin_move_onboarding_to_new_tab.sql:17).
admin_modules_registry : associe chaque module React d’admin à un onglet, avec libellé, icône, ordre et statut d’activation (Supabase/migrations/2025-09-20_training_onboarding_form.sql:745).
assistant_settings : configuration globale de l’assistant temps réel (modèle OpenAI, voix, URL, ICE servers, flags) (Supabase/migrations/2025-09-25_assistant_realtime_module.sql:2).
assistant_limits : quotas par utilisateur pour l’assistant (minutes/jour, sessions, images + compteurs quotidiens) (Supabase/migrations/2025-09-25_assistant_realtime_module.sql:12).
assistant_metrics : télémétrie des sessions assistant (durées, trafic, erreurs, images) reliée à chaque user/session (Supabase/migrations/2025-09-25_assistant_realtime_module.sql:56).
block_samples : bibliothèque de modèles de blocs (titre, block_type, layout, payload JSON) utilisée pour préremplir la homepage (src/components/admin/home-blocks/BlockSamplesPanel.jsx:318).
builder_families : familles du catalogue modules (nom, icône, ordre) servant de racine au builder (src/contexts/BuilderCatalogContext.jsx:26, src/contexts/BuilderCatalogContext.jsx:119).
builder_subfamilies : sous-catégories rattachées à une famille, avec ordre d’affichage (src/contexts/BuilderCatalogContext.jsx:29, src/contexts/BuilderCatalogContext.jsx:133).
builder_modules : modules pédagogiques (titre, description, durée, subfamily_id) exploités dans les parcours (src/contexts/BuilderCatalogContext.jsx:31, src/contexts/BuilderCatalogContext.jsx:154).
chat_conversations : métadonnées des fils de discussion live (archivage client, staff assigné, statuts, timestamps) (Supabase/migrations/2025-10-05_client_live_chat_module.sql:2).
chat_messages : messages d’une conversation (conversation_id, sender, contenu, ressource jointe) manipulés via chatApi (src/lib/chatApi.js:203).
component_rules : règles d’affichage des composants par type d’utilisateur (famille, états visible/hidden/disabled par rôle) gérées dans l’UI ComponentManager (src/pages/admin/ComponentManagerPage.jsx:35).
content_blocks : blocs dynamiques du site (titre, layout, contenu JSON, statut, order_index, priorité) avec fonctions de duplication/tri (sql/create_home_blocks_functions.sql:136).
courses : parcours de formation (titres, statuts, snapshots nodes/edges, auteur) listés et dupliqués dans l’admin (src/components/admin/FormationManagementPanel.jsx:110).
dashboard_layouts : dispositions JSON des modules par owner_type/owner_id pour les dashboards personnalisables (database/add_homepage_module.sql:59).
formation_module_statuses : colonnes Kanban (submission_id, module_uuid, status, position) synchronisées temps réel pour le suivi Live (Supabase/migrations/2025-09-08_formation_module_statuses.sql:6).
formation_submissions : demandes client (user_id, course_id, status, course_snapshot, etc.) injectées dans le Kanban lors de l’approbation (Supabase/migrations/2025-09-08_init_fms.sql:33, Supabase/migrations/2025-09-08_init_fms.sql:129).
forum_posts : réponses d’un sujet (topic_id, author_id, content, timestamps) rendues dans ForumTopicPage (src/pages/ForumTopicPage.jsx:61, src/pages/ForumTopicPage.jsx:104).
forum_topics : sujets du forum (titre, auteur, pin, dates d’activité, compte de posts) listés avec jointure sur posts (src/pages/ForumPage.jsx:51).
kanban_user_modules_v1 : vue exposant les statuts Kanban (status_id, user, submission, module, status, position) consommée par clients/admins (Supabase/migrations/2025-09-08_kanban_user_modules_v1.sql:7).
modules_registry : registre des modules client (clé, nom, permission requise, layout par défaut, activation) utilisé par le dashboard builder (database/add_homepage_module.sql:34).
profiles : profil enrichi de chaque utilisateur (noms, type, champs personnalisés) alimentant sélecteurs et ressources (src/components/admin/ResourcesPanel.jsx:25).
resource_assignments : affectations de ressources à des utilisateurs (resource_id, user_id, assigned_by) pour le suivi des partages (src/components/admin/resources/ResourcesTableRow.jsx:34).
resource_ratings : notation des ressources (resource_id, user_id, rating) utilisée côté client pour les feedbacks (src/components/dashboard/ClientResourcesPanel.jsx:88).
resources : base documentaire (nom, type, format, URL ou file_path, rattachement aux familles builder) administrée dans ResourcesPanel (src/components/admin/ResourcesPanel.jsx:40).
role_permissions : permissions système (clé *:view_module, etc.) reliées aux modules_registry et aux contrôles d’accès (database/add_homepage_module.sql:33).
static_pages : pages CMS statiques avec contenus et statuts publiés/archivés administrables (Supabase/migrations/2025-09-30_static_pages_module.sql:99).
themes : classe de thèmes UI (tokens, métadonnées) chargés dans l’interface (src/components/admin/ThemePanel.jsx via supabase.from('themes'), ex. src/components/admin/ThemePanel.jsx:33).
ticket_replies : réponses à un ticket (ticket_id, user_id, profil auteur, date) pour l’historique de support (src/components/admin/TicketManagementPanel.jsx:55).
tickets : incidents client (titre, status, priorité, assigné, horodatages de lecture) suivis côté client et admin (src/components/admin/TicketManagementPanel.jsx:31).
training_onboarding_nps : réponses NPS associées au formulaire d’onboarding (answer/comment par user/response) (Supabase/migrations/2025-09-20_training_onboarding_form.sql:76).
training_onboarding_question_options : options multichoix attachées aux questions (value, label, sort_order, actif) (Supabase/migrations/2025-09-20_training_onboarding_form.sql:42).
training_onboarding_questions : questions du brief (label, type, helper, ordre, métadonnées, flags) organisées par section (Supabase/migrations/2025-09-20_training_onboarding_form.sql:21).
training_onboarding_responses : réponses par utilisateur (draft/submitted JSON, statuts, timestamps, unique user_id) exploitées dans les résumés (Supabase/migrations/2025-09-20_training_onboarding_form.sql:61).
training_onboarding_sections : sections du questionnaire (slug, titre, description, icône, step_order) pour structurer l’onboarding (Supabase/migrations/2025-09-20_training_onboarding_form.sql:10).
user_formation_snapshots : copies JSON des parcours affectés à un utilisateur/submission pour reconstruire le Kanban (Supabase/migrations/2025-09-08_init_fms.sql:3, tools/audit_step1.ps1:118).
user_formations : association utilisateur ↔ formation (status, enrolled_at) gérée depuis le dashboard client (src/components/dashboard/modules/UserFormationStatusSelect.jsx:35).
user_types : typologie des comptes (type_name, display_name, permissions) utilisée pour filtrer droits et règles d’UI (src/pages/admin/ComponentManagerPage.jsx:35).




Edge Functions actives (supabase/functions/) :

assistant-mint-key
assistant-voice-preview
content-blocks-search
create-admin-user
create-user-with-role
delete-user-full
get-dashboard-layout
invite-user
manage-content-block
notify-training-onboarding
set-user-password
update-dashboard-layout
users-search


Tables pour lesquelles la RLS est déjà activée (cf. migrations ALTER TABLE … ENABLE ROW LEVEL SECURITY):

Table	Ensemble des policies actives
public.formation_module_statuses	fms_select_own, fms_insert_own, fms_update_own, fms_select_admin, fms_update_admin
public.training_onboarding_sections	training_onboarding_sections_select, training_onboarding_sections_admin_manage
public.training_onboarding_questions	training_onboarding_questions_select, training_onboarding_questions_admin_manage
public.training_onboarding_question_options	training_onboarding_question_options_select, training_onboarding_question_options_admin_manage
public.training_onboarding_responses	training_onboarding_responses_select_own, training_onboarding_responses_select_admin, training_onboarding_responses_insert_own, training_onboarding_responses_update_own
public.training_onboarding_nps	training_onboarding_nps_select_own, training_onboarding_nps_select_admin, training_onboarding_nps_insert_own, training_onboarding_nps_update_own
public.assistant_settings	assistant_settings_select, assistant_settings_update
public.assistant_limits	assistant_limits_select, assistant_limits_insert, assistant_limits_update
public.assistant_metrics	assistant_metrics_select, assistant_metrics_insert, assistant_metrics_update
public.static_pages	static_pages_public_read, static_pages_admin_manage
Autres politiques déjà déclarées mais dont l’activation RLS n’est pas encore commise dans les migrations :

public.chat_conversations : policy client_update_chat_last_viewed (RLS à activer lors de la finalisation du module chat côté client/admin).
