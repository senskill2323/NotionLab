# Index des regles

## Vue d'ensemble
- `00-architecture/` : cartographie du shell React/Vite, providers globaux et flux client/admin.
- `01-standards/` : socle de reference (stack, CI/CD, scripts npm/SQL, regles d'intervention).
- `03-frameworks-and-libraries/` : inventaire complet des dependances prod/dev synchronise avec `package.json`.
- `04-database/` : documentation Supabase (gouvernance, RLS, edge functions, inventaire des tables).
- `06-deployment/` : checklists pour livrer ou mettre a jour un module client ou admin.
- `07-Fonctionnalites/` : guides fonctionnels pour chaque module cle (assistant, formations, tickets, etc.).

## Navigation detaillee

### 00-architecture
- `00-architecture/readme.mdc` : vue systeme du SPA (routing, providers Auth/Permissions/Assistant, React Query).
- `00-architecture/Espace administrateur` : reference de la zone admin (onglets dynamiques, permissions, dependances Supabase).

### 01-standards
- `01-standards/readme.mdc` : regles critiques (lecture prealable, workflow modification), scripts `npm run db:*`, conventions CI/CD et environnement.

### 03-frameworks-and-libraries
- `03-frameworks-and-libraries/readme.mdc` : listes exhaustives des libs front/back, classes par usage (UI, state, flow, CLI).

### 04-database
- `04-database/readme.mdc` : vision d'ensemble Supabase, gouvernance/RLS, edge functions et inventaire automatise des tables/colonnes.

### 06-deployment
- `06-deployment/Deployer un nouveau module client` : permissions `*:view_module`, enregistrement `modules_registry`, layout par defaut et integration React.
- `06-deployment/Deployer un nouveau module admin` : liaison permissions `admin:*`, `admin_dashboard_tabs`, `admin_modules_registry` et composant dashboard.

### 07-Fonctionnalites
- `07-Fonctionnalites/Assistant IA` : assistant WebRTC (`useAssistant`, quotas, metrics Supabase, edge `assistant-mint-key`).
- `07-Fonctionnalites/Blueprint Notion` : builder React Flow (autosave, RPC partage public, palette admin).
- `07-Fonctionnalites/Builder de formation` : builder formation, `BuilderCatalogContext`, autosave et workflows admin/client.
- `07-Fonctionnalites/Formation` : panorama catalogue, dashboards client/admin, contraintes RLS/RPC.
- `07-Fonctionnalites/Gestion des bloques` : lifecycle `content_blocks`, edge `manage-content-block`, bibliotheque de layouts.
- `07-Fonctionnalites/Gestion des tickets` : module tickets realtime, flux Supabase et risques RLS.
- `07-Fonctionnalites/Gestion des utilisateurs` : invitation (`invite-user`), suppression (`admin_delete_user_full`), contexts Auth/Permissions.
- `07-Fonctionnalites/Module d'invitation` : workflow d'invitation edge `invite-user`, activation comptes.
- `07-Fonctionnalites/Module de notification` : gabarits email, edge `send-email`, seed SQL et preferences.
- `07-Fonctionnalites/Module de themes` : ThemeProvider/ThemePanel, CRUD tokens et preview dynamique.
- `07-Fonctionnalites/Preferences de formation` : onboarding formations, React Query, tables `training_onboarding_*`, edge `notify-training-onboarding`.
- `07-Fonctionnalites/Suppression d'un compte` : usage exclusif de `supabase.rpc('admin_delete_user_full')` pour purge complete.
