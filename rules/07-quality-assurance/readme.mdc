---
title: "NotionLab Guide IA - Module Formations"
version: "2"
date: "2025-01-18"
owner: "NEEDS-VERIFY Provide owner or primary contact."
description: Revue code : lisibilité, types, sécurité, accessibilité, perf, i18n. Analyses statiques, DoD, changelog, RCA, critères d’acceptation et non-régression.
---

<!-- AUTO:BEGIN -->
<!-- ANCHOR:OVERVIEW -->
readmeIA met en avant les risques, limites et points a surveiller pour garantir la qualite du module Formations.

<!-- ANCHOR:STANDARDS -->
- Edge cases a couvrir : snapshot obsolete si un parcours change entre soumission et validation; Kanban orphelin si la formation est supprimee ensuite; drift de permissions lors d'un changement de role; decalage realtime temporaire sur multi-onglets.
- Performance : filtrage du catalogue builder cote client peut ralentir au dela de 1000 modules; ReactFlow degrade au dela de 100 noeuds; les index (user_id, submission_id) sont critiques pour formation_module_statuses.
- Cohesion des donnees : aligner course.status et user_formation.status; garantir la stabilite des UUID modules entre snapshot et live; appliquer strictement les policies RLS.
- Points techniques : surveiller l'encodage de fichiers contenant des caracteres etendus; ameliorer la gestion d'erreurs des RPC formations; verifier la couverture TypeScript (NEEDS-VERIFY).
 - Onboarding formation (critères d'acceptation):
   - Client actif voit le wizard; non-bloquant; CTA « Remplir les préférences » si vide.
   - Wizard en 4–6 étapes recommandé (seed 10 sections possible; masquer via désactivation admin).
   - Autosauvegarde + message « Brouillon enregistré »; toast en cas d’échec; 0 champ requis.
   - UI cartes cliquables (single/multi), sliders 1–5; FR uniquement; pictogrammes dans le résumé.
   - Résumé client et admin (lecture seule) s’affichent immédiatement après soumission.
   - Notifications: email à `ONBOARDING_NOTIFICATION_EMAIL` (ou `OWNER_EMAIL`) à la première soumission et à chaque modification.
   - NPS après première soumission: Oui/Non + commentaire; affiche un merci succinct.
   - Accès & confidentialité: RLS stricte; disclaimer minimal interdisant les données sensibles.
 - Assistant (critères d'acceptation):
   - Rôles: visible et utilisable uniquement par `owner`/`admin`/`client` (front: masquage + garde; edge: vérification JWT + profil).
   - UI: le bouton « Assistant » (Header) ouvre un drawer fixé à droite, sans déplacer le contenu principal; un mini‑widget flottant permet l’ouverture/fermeture et le micro on/off.
   - Média: micro on/off et caméra on/off fonctionnent; prévisualisation locale visible si caméra activée; bouton « Montre‑lui » capture un snapshot; upload image/PDF accepté.
   - Voix & transcription: lecteur audio pour la voix de l’assistante; transcription en direct (FR) si supportée (fallback Web Speech API).
   - RAG: appel externe via Edge Function `rag-search`; sources affichées uniquement si l’utilisateur coche l’option; sinon, masquées par défaut.
   - Realtime: en cas de déconnexion, afficher « Connexion instable, je tente de me reconnecter… » et retenter automatiquement.
   - Mémoire: lecture/mise à jour parcimonieuse via Edge Function `memory`; ne pas stocker d’infos sensibles.
   - Confidentialité: bandeau de consentement micro/caméra visible; page « Mentions & confidentialité » accessible.
   - Séparation de comptes Cloud/VPS: vérifier qu’aucun appel direct aux webhooks n8n n’est effectué depuis le client (Network), que les Edge Functions sont bien appelées (Cloud), et que les secrets n8n ne se trouvent pas dans le bundle client (Sources). Vérifier qu’aucune migration/extension RAG/mémoire du VPS n’est appliquée sur le projet Supabase Cloud.

<!-- ANCHOR:WORKFLOWS -->
- Verifier apres validation qu'init_kanban_statuses_for_submission cree bien les enregistrements formation_module_statuses attendus.
- Confirmer que emitSessionRefresh ou queryClient.invalidateQueries() sont declenches apres updates critiques pour eviter la derive de contexte.
- Auditer regulierement role_permissions et modules_registry.required_permission pour maintenir les gardes de routes.
 - QA Onboarding (checklist courte):
   1) Connexion client actif → accès `/mes-preferences-formation` et `/editer`.
   2) Wizard: autosauvegarde visible; navigation étapes OK; 0 champ requis; FR/tutoiement OK.
   3) Soumission (1ère): toast succès; NPS s’ouvre; après réponse → redirection vers le résumé.
   4) Emails: « Nouveau brief d’onboarding… » puis « Brief d’onboarding mis à jour… » après resoumission.
   5) Résumé client/admin cohérent (format valeurs, “Autre” + texte, pictos, dates de soumission).
   6) RLS: impossible de lire/écrire les réponses d’un autre utilisateur; admin lecture seule.
   7) Logs Edge: visibles dans la minute; vérifier immédiatement après soumission.
 - QA Assistant (checklist courte):
   1) Compte `client`/`admin`/`owner` → bouton « Assistant » visible; drawer s’ouvre; mini‑widget OK.
   2) Mic/cam: bascule ON/OFF; preview locale si cam ON; snapshot « Montre‑lui » OK; upload image/PDF OK.
   3) Poser une question: par défaut, sources masquées; cocher « Montrer les sources » → sources visibles.
   4) Realtime: couper la connexion ~5s → message de reconnexion s’affiche; reprise automatique.
   5) Edge Functions: hors rôles autorisés → 401/403.
   6) Consentement: bandeau visible; page « Mentions & confidentialité » accessible.

<!-- ANCHOR:EXAMPLES -->
- FormationsPanel.jsx (ligne 78) utilise enrolled_at comme proxy pour la date "go live" et laisse un TODO pour ajuster des que la colonne cible sera disponible.
- Supabase/functions/set-user-password/index.ts force Password123! avant d'envoyer un email de reset.
- Supabase/functions/update-dashboard-layout/index.ts supprime puis reinserre afin de contourner un trigger ON UPDATE defectueux.
 - Onboarding (exemples de vérifications):
   - `src/components/onboarding/TrainingOnboardingWizard.jsx`: autosave, filtres questions actives, disclaimer visible.
   - `src/components/onboarding/TrainingPreferencesSummary.jsx`: pictos par section, formatage « Autre ».
   - `src/lib/trainingOnboardingApi.js`: notification via `supabase.functions.invoke('notify-training-onboarding', {...})`.
   - `Supabase/functions/notify-training-onboarding/index.ts`: envoi Resend; CORS `POST, OPTIONS`.

<!-- ANCHOR:LIMITS -->
- .env.local contient SUPABASE_SERVICE_ROLE committe : restreindre sa diffusion et confirmer qu'il n'est pas embarque dans le bundle.
- NEEDS-VERIFY : confirmer la presence d'une couverture de tests pour le module formations.
- NEEDS-VERIFY : valider l'encodage des fichiers avant edition pour eviter la perte de texte.
 - Étapes: si 10 sections actives, le wizard aura >6 étapes; désactiver certaines sections/questions dans l’admin pour tenir l’objectif 4–6.
 - Encodage FR: prévoir une migration de correction d’accents (titres/libellés seedés) sans modifier `slug`/`value`.
 - Lint IDE sur Deno/npm import pour Edge Functions (std@0.168.0, npm:resend@3.4.0) non bloquant en prod; runtime Supabase gère l’exécution.
 - Assistant (limites):
   - Le support de la Web Speech API varie selon navigateurs/appareils; prévoir un fallback silencieux si non supporté.
   - La permission micro/caméra peut être refusée par l’utilisateur; UI doit rester fonctionnelle (texte + RAG).
   - Les sessions Realtime peuvent subir des délais ICE/temp réseau; le mécanisme de reconnexion doit être robuste.
   - Le webhook n8n peut être indisponible; prévoir le message « Je n’ai pas accès à ces documents, je tente une réponse générique. ».
<!-- AUTO:END -->
