---
title: "NotionLab Guide IA - Module Formations"
version: "2"
date: "2025-01-18"
owner: "NEEDS-VERIFY Provide owner or primary contact."
description: Bonnes pratiques TS/JS (React/Vite), Edge Functions Deno (TypeScript), SQL Postgres/Supabase : typage, async, structure, schémas, migrations, libs autorisées/interdites avec alternatives.
---

<!-- AUTO:BEGIN -->
<!-- ANCHOR:OVERVIEW -->
Le code du module Formations utilise majoritairement JavaScript/TypeScript côté client (React 18 + Vite 7) et TypeScript pour les fonctions Edge (Deno). Les migrations et RPC s'écrivent en SQL Postgres.

<!-- ANCHOR:STANDARDS_JS_TS -->
- Utiliser l'alias Vite `@` pour les imports internes (`@/lib/customSupabaseClient`).
- Préférer des helpers purs et des hooks dédiés; composants fonctionnels, déclaratifs, sans effets latéraux non maîtrisés.
- Requêtes réseau via React Query (`@tanstack/react-query`) avec `queryKey` stables; `invalidateQueries` après mutation.
- Onboarding Wizard: charger la configuration via `fetchTrainingOnboardingConfig({ includeInactive: false })`; charger la config complète (`fetchTrainingOnboardingConfigWithAllQuestions`) pour les résumés client/admin.
- Formattage des valeurs: centralisé dans `src/lib/trainingOnboardingApi.js` (helpers `buildEmailSummary`, `formatValueForEmail`).
- Ne pas exposer de secrets; les appels privilégiés passent par Edge Functions.

<!-- ANCHOR:STANDARDS_EDGE_FUNCS -->
- Fonctions Edge en TypeScript (Deno) avec import explicite du runtime: `import "jsr:@supabase/functions-js/edge-runtime.d.ts";`.
- CORS: inclure `Access-Control-Allow-Methods: POST, OPTIONS` et gérer la préflight `OPTIONS`. Autoriser les en‑têtes: `authorization, content-type, apikey, x-client-info, x-supabase-authorization`.
- Notifications Onboarding: `notify-training-onboarding` utilise `Resend` côté serveur (Deno), avec `RESEND_API_KEY`, expéditeur et destinataire injectés via `Deno.env.get()`.
- Assistant (Edge Functions):
  - `realtime-offer`: proxy WebRTC → OpenAI Realtime
    - Requête HTTP SDP: `Content-Type: application/sdp`, `Accept: application/sdp`, `OpenAI-Beta: realtime=v1`.
    - Modèle par défaut: `gpt-realtime` (peut être forcé via secret `OPENAI_REALTIME_MODEL`).
    - Secrets optionnels: `OPENAI_REALTIME_VOICE` (défaut `verse`), `OPENAI_REALTIME_INSTRUCTIONS` (texte FR pour guider la réponse vocale).
    - Vérification de rôle: `profiles.user_type ∈ {owner, admin, client}`. Bypass diagnostic possible via secret `ASSISTANT_BYPASS_ROLE=1` (à retirer ensuite).
  - `rag-search`: proxy vers `N8N_RAG_WEBHOOK_URL` avec `{ query, includeSources, image?, file? }`, injecte le prompt système « L’assistant de Yann » (FR, tutoiement, sources sur demande).
  - `memory`: CRUD parcimonieux de la mémoire longue (`assistant_memories.data`) via n8n — lecture (`N8N_MEMORY_SEARCH_URL`) vs écriture (`N8N_MEMORY_WEBHOOK_URL`), fusion côté serveur; proscrire toute donnée sensible.
  - Sécurité n8n: si `N8N_*_TOKEN` est posé, les Edge Functions ajoutent automatiquement `?token=...` aux webhooks.
  - Secrets requis: `OPENAI_API_KEY`, `N8N_RAG_WEBHOOK_URL`, `N8N_MEMORY_WEBHOOK_URL`, `N8N_MEMORY_SEARCH_URL`, `SUPABASE_URL`, `SUPABASE_ANON_KEY` (infrastructure Supabase).

<!-- ANCHOR:STANDARDS_SQL -->
- Nommage snake_case, colonnes `*_at` timestamptz, `uuid` par défaut via `gen_random_uuid()`.
- Upsert avec `on conflict (...) do update set ...` et contraintes explicites (unique + checks).
- RLS obligatoire; séparer policies lecture/écriture; `security definer` pour RPC admin sensibles.
- Assistant (SQL): table `public.assistant_memories(user_id uuid PK, data jsonb, updated_at timestamptz)` avec RLS « own only ».

<!-- ANCHOR:EXAMPLES -->
```ts
// Edge Function (simplifié)
import "jsr:@supabase/functions-js/edge-runtime.d.ts";
import { serve } from 'https://deno.land/std@0.168.0/http/server.ts';
import { Resend } from 'npm:resend@3.4.0';

const resend = new Resend(Deno.env.get('RESEND_API_KEY')!);
serve(async (req) => new Response(JSON.stringify({ ok: true }), { headers: { 'Content-Type': 'application/json' } }));
```

```ts
// Appel du proxy Realtime depuis le client (extrait)
const { data, error } = await supabase.functions.invoke('realtime-offer', {
  body: { sdp: offer.sdp },
});
if (error) throw error;
await pc.setRemoteDescription({ type: 'answer', sdp: data.sdp });
```

```js
// React Query: config Onboarding (wizard)
const configQuery = useQuery({
  queryKey: ['trainingOnboardingConfig'],
  queryFn: () => fetchTrainingOnboardingConfig({ includeInactive: false }),
});
```

```js
// Assistant (client): état partagé et transcription
// - Zustand (useAssistantStore) pour état UI/média/connexion
// - Web Speech API (fallback) en 'fr-FR' si disponible
```

```sql
-- Index d'ordre pour options
create index if not exists training_onboarding_question_options_question_order_idx
  on public.training_onboarding_question_options(question_id, sort_order);
```

<!-- ANCHOR:LIMITS -->
- Les imports Deno (`std@0.168.0`, `npm:resend@3.4.0`) peuvent générer de faux lint errors dans l'IDE; exécution correcte dans le runtime Supabase.
- Encodage FR: corriger les libellés/titres seedés affichant « ? » via une migration d’UPDATE.
<!-- AUTO:END -->
