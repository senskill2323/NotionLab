---
title: "Live Chat - Code Patterns"
version: "2"
date: "2025-10-09"
owner: "NEEDS-VERIFY Provide owner or primary contact."
description: Hooks, helpers and Supabase usage for client/admin live chat modules.
---

<!-- AUTO:BEGIN -->
<!-- ANCHOR:LIVE_CHAT_CODE -->
- Hook `useClientLiveChat()`
  - Query keys: `['client-live-chat','conversations',guestKey]` and `['client-live-chat','messages',conversationId]`
  - Selection: `selectedConversationId` synced with URL search param; `ensureSelection` respects current view (active vs archived)
  - Mark as read: `markConversationViewedByClient` mutation + optimistic cache update of `client_last_viewed_at`
  - Archive toggle: mutation calls `archiveClientConversation` (RPC `client_chat_set_archived`), updates cache on success and reverts + toast on error
  - Throttle: `scheduleConversationsRefetch()` (~250 ms) replaces redundant `invalidateQueries`

- API `src/lib/chatApi.js`
  - `listClientConversations()` -> RPC `get_chat_conversations_with_details`
  - `listChatStaffUsers()` -> RPC `client_list_chat_staff_users`
  - `startClientConversation({ staffUserId, initialMessage? })` -> RPC `client_start_chat_conversation`; normalize booleans (`client_archived`, `has_unread`)
  - `archiveClientConversation(conversationId, archived)` -> RPC `client_chat_set_archived`; emits `conversation` broadcast events via chatApi helpers
  - `sendMessage` / `sendFile` / `sendResource` -> insert `chat_messages` puis `broadcastMessageChange` pour propager l'evenement `message`
  - `subscribeToClientChatMessages`, `subscribeToClientConversations`, `getOrCreateConversation.subscribeToMessages` s'appuient sur Supabase broadcast (topics `client-chat-messages-*`, `client-chat-conversations-*`) avec acquittement et auto-cleanup

- Admin panel specifics
  - `AdminLiveChatPanel` fetches active vs archived via RPC `admin_get_chat_conversations_with_details`; broadcast `conversation` et `message` alimentent les mises a jour locales
  - `ConversationList` utilise le helper `setAdminConversationArchived` (RPC `admin_chat_set_archived`) qui publie l'evenement `conversation`
  - Mark as read: update `admin_last_viewed_at` via supabase.from(...).update + toast en cas d'echec

- Supabase client: toujours passer par `@/lib/customSupabaseClient` (timeouts + auth)
- Ne jamais exposer la service role; toute logique privilegiee reste dans les RPCs ou Edge functions
<!-- AUTO:END -->
