---
title: "Live Chat - Code Patterns"
version: "2"
date: "2025-10-09"
owner: "NEEDS-VERIFY Provide owner or primary contact."
description: Hooks, helpers and Supabase usage for client/admin live chat modules.
---

<!-- AUTO:BEGIN -->
<!-- ANCHOR:LIVE_CHAT_CODE -->
- Orchestrateur client `ClientLiveChatPage.jsx`
  - Charge la liste via `supabase.rpc('get_chat_conversations_with_details')` (helper `chatApi.fetchClientConversations` a ajouter) et aligne le tri local (`sortConversationsByUpdatedAt`).
  - S'abonne via `chatApi.subscribeToClientConversations` et `chatApi.subscribeToClientChatMessages` (broadcast prioritaire, fallback `postgres_changes` provisoire tant que les surfaces legacy n'emet pas).
  - Envoi/archivage: uniquement au travers de `chatApi.sendMessage|sendFile|sendResource` et `chatApi.archiveClientConversation` (TODO: remplacer l'appel direct a `getOrCreateConversation` par `startClientConversation` pour rester sur le pipeline RPC).
  - Lecture: `chatApi.markConversationViewedByClient` (a migrer vers un RPC `client_mark_chat_viewed` des que RLS est active).

- Widget visiteur `components/ChatWidget.jsx`
  - Reutilise `chatApi.startClientConversation`, `chatApi.sendMessage|sendFile|sendResource` et `chatApi.archiveClientConversation` pour garantir `sender='user'` et la diffusion broadcast.
  - Bannir les insertions directes `supabase.from('chat_messages')`; le widget et la page partagent la meme logique de normalisation/hydratation.
  - Ecoute temps reel via `chatApi.subscribeToClientChatMessages` et coupe les canaux sur cleanup.

- API `src/lib/chatApi.js`
  - Seul endroit autorise a manipuler `chat_messages` / `chat_conversations` tant que la refonte RLS est en cours.
  - `broadcastMessageChange` et `broadcastConversationChange` publient sur `client-chat-messages-{id}` et `chat-live-admin`; toutes les mutations doivent appeler ces helpers.
  - `subscribeToClientChatMessages` garde le fallback `postgres_changes` pour absorber les surfaces legacy, mais la cible est broadcast-only une fois `AdminChatView` et `ChatWidget` refactores.
  - Normalise `sender` (`user` ou `admin|owner|prof`), attache la resource si besoin et gere `broadcastChannelRegistry`.

- Admin (`components/admin/AdminLiveChatPanel.jsx`, `AdminChatView.jsx`, `components/admin/chat/*`)
  - Fetch via `supabase.rpc('admin_get_chat_conversations_with_details')`.
  - Mutations via `chatApi.startAdminConversation`, `chatApi.setAdminConversationArchived`, `chatApi.sendMessage|sendFile|sendResource` (aucun `supabase.from` direct).
  - Marquage lecture: livrer un RPC `admin_mark_chat_viewed` security definer puis l'exposer via `chatApi.markConversationViewedByAdmin`.

- Patrons communs
  - Toujours importer `supabase` depuis `@/lib/customSupabaseClient`.
  - `sender` accepte seulement `user`, `admin`, `owner`, `prof`.
  - Journaliser via `console.error('context', error)` avant toast pour suivre les echecs temps reel.
<!-- AUTO:END -->
