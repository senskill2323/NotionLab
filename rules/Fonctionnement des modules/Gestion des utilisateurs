<!-- ANCHOR:ACCOUNT_DELETION_DEPLOYMENT -->
- Suppression totale de compte (Auth + identitÃ©s + donnÃ©es liÃ©es)
  - RPC Ã  dÃ©ployer: `public.admin_delete_user_full(p_user_id uuid)` [SECURITY DEFINER].
  - DÃ©ploiement (local/dev/prod):
    1. Ouvrir l'Ã©diteur SQL Supabase du projet actif (mÃªme projectâ€‘ref que l'app).
    2. Coller la dÃ©finition de la fonction et exÃ©cuter:
       - `create or replace function public.admin_delete_user_full(p_user_id uuid) returns json language plpgsql security definer ...` (voir doc DB).
       - `grant execute on function public.admin_delete_user_full(uuid) to authenticated;`
    3. RedÃ©marrer l'app si nÃ©cessaire (les appels `supabase.rpc(...)` sont cÃ´tÃ© client).
    4. VÃ©rifier via un test rapide: `select public.admin_delete_user_full('<USER_UUID>');`
  - IntÃ©gration UI (dÃ©jÃ  appliquÃ©e):
    - `src/components/admin/UserManagementPanel.jsx` â†’ corbeille â†’ `supabase.rpc('admin_delete_user_full', { p_user_id })`
    - `src/pages/admin/ManageUserPage.jsx` â†’ bouton supprimer â†’ mÃªme RPC
    - `src/components/account/DeleteAccountSection.jsx` â†’ autoâ€‘suppression â†’ mÃªme RPC
  - Postâ€‘checks SQL (attendus = 0 ligne): `auth.users`, `auth.identities`, `public.profiles`, `public.user_formation_snapshots`, `public.user_formations`, `public.formation_submissions`, `public.formation_module_statuses`, `public.ticket_replies`, `public.tickets` (user_id | assigned_to), `public.action_logs` (actor_id), `public.chat_conversations` (guest_id), `public.chat_messages` (via join sur conversations).
  - Rollback: reâ€‘crÃ©er lâ€™utilisateur si nÃ©cessaire; la fonction Ã©tant idempotente, une rÃ©â€‘exÃ©cution ne recrÃ©e rien.


  
Suppression de compte (full delete)
•	Objectif : effacer Auth + identités + données domaine.
•	Déclencheurs UI :
o	UserManagementPanel.jsx (icône corbeille)
o	ManageUserPage.jsx (bouton supprimer)
o	DeleteAccountSection.jsx (auto-suppression)
o	Tous appellent supabase.rpc('admin_delete_user_full', { p_user_id }).
•	Orchestration serveur : RPC public.admin_delete_user_full(uuid) (SECURITY DEFINER)
o	Nettoie : formation_module_statuses, user_formation_snapshots, user_formations, formation_submissions, tickets, ticket_replies, action_logs, chat_messages, chat_conversations, courses custom (author_id = user, course_type='custom').
o	Supprime public.profiles puis auth.admin.delete_user(p_user_id) (inclut auth.identities).
•	Autorisations : utilisateur ? auto-suppression ; owner/admin ? suppression d’autrui ; seul un owner peut supprimer un owner.




- le module admin d'invitation à la création d'un compte: 
  - Utiliser supabase.functions.invoke('invite-user', ...) depuis l'UI admin ; pas de service-role cote client.
  - La fonction Edge met profiles.status = 'active' et applique le user_type client ; garder cette source de verite.
  - Secrets requis cote Edge : SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY (optionnel INVITE_REDIRECT_URL).
- Respecter authReady et authLoading avant redirection afin d'eviter un spinner permanent ou des redirections prematures.
- Verifier les droits via usePermissions().hasPermission et garder role_permissions/modules_registry/admin_dashboard_tabs synchronises :
  - Toute nouveaute client passe par une permission de type *:view_module referencee dans modules_registry.required_permission.
  - Pour un module admin, creer une permission de type admin:*, l'inserer via migration Supabase et la lier a admin_dashboard_tabs.permission_required avant exposition UI.
•	UI : bouton « Inviter un utilisateur » (src/components/admin/UserManagementPanel.jsx) ? Edge Function invite-user.
•	Serveur : Supabase/functions/invite-user/index.ts
o	auth.admin.inviteUserByEmail (création/ré-utilisation)
o	Mise à jour public.profiles (user_type_id client, status = 'active').
o	Secrets Edge : SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY, optionnel INVITE_REDIRECT_URL (fallback /connexion).
•	Activation : plus de « guest » ; arrivée sur /activation-invitation pour définir le mot de passe (accès client déjà actif).
  

- Procéessus pour supprimer un compte (soit par le client sur son sompte, soit via gestion des utilisateurs en admin):
  - Utiliser exclusivement l'appel `supabase.rpc('admin_delete_user_full', { p_user_id })` pour supprimer un compte depuis l'UI (Admin et autoâ€‘suppression).
  - reflète une suppression TOTALE (auth + identitÃ©s + profil + donnÃ©es liÃ©es) et Ãªtre irrÃ©versibles.
  - Permissions: seul un `owner` peut supprimer un `owner`; `owner`/`admin` peuvent supprimer d'autres comptes; un utilisateur peut se supprimer lui-même.
  - Admin Users list (`src/components/admin/UserManagementPanel.jsx`) â†’ corbeille â†’ RPC `admin_delete_user_full`.
  - Admin User page (`src/pages/admin/ManageUserPage.jsx`) â†’ bouton supprimer â†’ RPC `admin_delete_user_full`.
  - Compte utilisateur (`src/components/account/DeleteAccountSection.jsx`) â†’ bouton supprimer â†’ RPC `admin_delete_user_full`.



