Framworks:

React + Vite forment le cœur, Tailwind/Radix/TipTap composent la couche UI, Zustand/Tanstack Query gèrent l’état, dnd-kit/React Flow assurent les interactions complexes, et Supabase fournit l’auth, la base temps réel et le stockage — le tout empaqueté via npm/Node 20.



Technologies sur le projet: 

Base stack : Frontend React 18 avec Vite 7, backend Supabase (auth, base Postgres, realtime, stockage). Node 20 côté build/CI.
UI & état : Tailwind CSS + Radix UI comme socle, react-hook-form pour les formulaires, Zustand pour l’état partagé, framer-motion pour les animations, @dnd-kit pour le drag/drop, React Flow pour les builders visuels.
Accès données : RPC Postgres et fonctions Edge (Deno/TypeScript) pour toute logique privilégiée ; RLS activée sur les tables sensibles. Chat, assistant, modules formation passent par des helpers chatApi/assistantApi.
Realtime : Channels Supabase en broadcast (ack/self) orchestrés par des helpers (subscriptions unifiées, fallback hydratation).
CI/CD & scripts : npm (npm ci / npm run build / npm run dev/preview), exécution SQL via npm run db:query/db:file, déploiement FTPS.
Edge Functions actives : assistant-mint-key / voice-preview, notify-training-onboarding, invite-user, delete-user-full, create-user-with-role, content-blocks-search, manage-content-block, dashboard layout helpers, set-user-password, users-search, etc.


Instructions: 

- Utilise powershell v7.xx installé ("C:\Program Files\PowerShell\7\pwsh.exe")
- Utilise le script Node scripts/run-sql.js (lancé comme node scripts/run-sql.js "<ta requête SQL>") pour exécuter des requêtes SQL contre Supabase.
- Ne jamais exposer SUPABASE_SERVICE_ROLE dans le code client et limiter la diffusion du fichier .env.local.
- Env via /.env & /.env.local (ex. VITE_SUPABASE_URL, VITE_SUPABASE_ANON_KEY) ; alerter si manquants ; ne jamais exposer de clés service-role côté client.
- ID du projet Supabase: kiudpvvqpbkzeybogrnq (Projet NotionLab)
