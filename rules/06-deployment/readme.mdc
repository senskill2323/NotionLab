---
title: "NotionLab Guide IA - Module Formations"
version: "2"
date: "2025-01-18"
owner: "NEEDS-VERIFY Provide owner or primary contact."
description: Environnements versionnÃ©s, CI/CD GitHub Actions avec build/tests/dÃ©ploiement, gestion secrets, healthchecks, monitoring Sentry/Uptime, logs, alerting, DNS, cache, CDN.
---

<!-- AUTO:BEGIN -->
<!-- ANCHOR:OVERVIEW -->
Le deploiement du module Formations s'appuie sur les scripts npm, les scripts deploy.* et un workflow GitHub Actions en mode FTPS.

<!-- ANCHOR:STANDARDS -->
- Scripts npm :
  - npm run dev (serveur Vite pour formations et builder).
  - npm run build (build production Vite).
  - npm run preview (serveur de preview).
  - Rappel Supabase : Garde en mÃ©moire que tu peux toujours aller inspecter les tables sur supabase via ce script qui agit comme ton MCP Supabase personnel: utilise en prioritÃ© le script interne `npm run db:query` / `npm run db:file` (scripts/run-sql.js) pour toute requÃªte SQL Postgres. Pour les requÃªtes de lecture, exÃ©cute-les directement. Pour toute requÃªte dâ€™Ã©criture (INSERT/UPDATE/DELETE, migrations, RPC modifiant lâ€™Ã©tat), demande dâ€™abord ma validation en dÃ©taillant prÃ©cisÃ©ment ce que la requÃªte fera avant de lâ€™exÃ©cuter. Confirme si lâ€™action envisagÃ©e dÃ©passe ce pÃ©rimÃ¨tre (policies, storage, Edge Functions, configuration projet) avant de chercher dâ€™autres outils.
- Scripts shell : deploy.sh et deploy.bat reconstruisent dist/ et listent les assets avant transfert.
- Secrets requis : FTP_* et VITE_SUPABASE_* doivent etre disponibles pour les pipelines.
- Migrations theÌ€mes: `Supabase/migrations/2025-09-18_themes_and_rpcs.sql` versionne `public.themes` + RPCs (`get_active_theme_tokens`, `set_active_theme`).
 - Onboarding formation (Edge Function & secrets):
   - Fonction Edge: `Supabase/functions/notify-training-onboarding/` (Deno, TypeScript) â€” mÃ©canisme conservÃ© via Resend.
   - Secrets requis (projet Supabase):
     - `RESEND_API_KEY`
     - `ONBOARDING_NOTIFICATION_EMAIL` (fallback: `OWNER_EMAIL`)
     - `ONBOARDING_EMAIL_FROM` (fallback: `SENDER_EMAIL`)
   - CORS: `Access-Control-Allow-Methods: POST, OPTIONS` et gestion du preflight `OPTIONS`.
 <!-- ANCHOR:WORKFLOWS -->
- Workflow GitHub Actions (.github/workflows/deploy.yml) :
  - Declenchement sur push de tags v*.
  - Etapes : checkout, verification des secrets, installation Node 20, npm ci, npm run build, verification dist/index.html, deploiement via SamKirkland/FTP-Deploy-Action en mode dangerous-clean-slate.
- Execution SQL : npm run db:query ou npm run db:file utilisent scripts/run-sql.js avec les credentiels .env.local ou DATABASE_URL.
- Application migration theÌ€mes (local/dev/prod):
  1. VÃ©rifier .env.local/.env (DATABASE_URL ou PG*).
  2. `npm run db:file "Supabase/migrations/2025-09-18_themes_and_rpcs.sql"` ou coller le SQL dans l'Ã©diteur Supabase.
  3. Confirmer via `select get_active_theme_tokens();` et un test `select set_active_theme('<uuid>');` (admin/owner requis).
 - DÃ©ploiement Onboarding (Edge Function):
   1. Ouvrir le Dashboard Supabase â†’ Edge Functions â†’ `notify-training-onboarding`.
   2. VÃ©rifier/poser les secrets: `RESEND_API_KEY`, `ONBOARDING_NOTIFICATION_EMAIL` (ou `OWNER_EMAIL`), `ONBOARDING_EMAIL_FROM` (ou `SENDER_EMAIL`).
   3. DÃ©ployer/Publier la fonction (verify_jwt: true par dÃ©faut).
   4. Tester immÃ©diatement une soumission depuis l'app (fenÃªtre de logs ~1 min).
   - PremiÃ¨re soumission: email Â«Â Nouveau brief dâ€™onboarding NotionLab â€“ {Nom}Â Â».
   - Resoumission: email Â«Â Brief dâ€™onboarding mis Ã  jour â€“ {Nom}Â Â».
   - En absence de `RESEND_API_KEY`: la fonction retourne `delivered: false` et loggue les champs envoyÃ©s (Ã  ne pas laisser en prod).

<!-- ANCHOR:ACCOUNT_DELETION_DEPLOYMENT -->
- Suppression totale de compte (Auth + identitÃ©s + donnÃ©es liÃ©es)
  - RPC Ã  dÃ©ployer: `public.admin_delete_user_full(p_user_id uuid)` [SECURITY DEFINER].
  - DÃ©ploiement (local/dev/prod):
    1. Ouvrir l'Ã©diteur SQL Supabase du projet actif (mÃªme projectâ€‘ref que l'app).
    2. Coller la dÃ©finition de la fonction et exÃ©cuter:
       - `create or replace function public.admin_delete_user_full(p_user_id uuid) returns json language plpgsql security definer ...` (voir doc DB).
       - `grant execute on function public.admin_delete_user_full(uuid) to authenticated;`
    3. RedÃ©marrer l'app si nÃ©cessaire (les appels `supabase.rpc(...)` sont cÃ´tÃ© client).
    4. VÃ©rifier via un test rapide: `select public.admin_delete_user_full('<USER_UUID>');`
  - IntÃ©gration UI (dÃ©jÃ  appliquÃ©e):
    - `src/components/admin/UserManagementPanel.jsx` â†’ corbeille â†’ `supabase.rpc('admin_delete_user_full', { p_user_id })`
    - `src/pages/admin/ManageUserPage.jsx` â†’ bouton supprimer â†’ mÃªme RPC
    - `src/components/account/DeleteAccountSection.jsx` â†’ autoâ€‘suppression â†’ mÃªme RPC
  - Postâ€‘checks SQL (attendus = 0 ligne): `auth.users`, `auth.identities`, `public.profiles`, `public.user_formation_snapshots`, `public.user_formations`, `public.formation_submissions`, `public.formation_module_statuses`, `public.ticket_replies`, `public.tickets` (user_id | assigned_to), `public.action_logs` (actor_id), `public.chat_conversations` (guest_id), `public.chat_messages` (via join sur conversations).
  - Rollback: reâ€‘crÃ©er lâ€™utilisateur si nÃ©cessaire; la fonction Ã©tant idempotente, une rÃ©â€‘exÃ©cution ne recrÃ©e rien.

<!-- ANCHOR:EXAMPLES -->
```bash
npm run build
./deploy.sh
```
```txt
Supabase â†’ Edge Functions â†’ notify-training-onboarding
Secrets:
- RESEND_API_KEY=... (obligatoire)
- ONBOARDING_NOTIFICATION_EMAIL=yann@bluewin.ch (ou OWNER_EMAIL)
- ONBOARDING_EMAIL_FROM=notifications@notionlab.co (ou SENDER_EMAIL)
```

<!-- ANCHOR:LIMITS -->
- Surveiller le mode dangerous-clean-slate de l'action FTPS (nettoyage complet avant upload).
- Ajouter un stage build/test sur `pull_request` + un `dry-run: true` (SamKirkland) avant le `dangerous-clean-slate` pour eviter les deletions accidentelles.
- Limiter `server-dir` a un sous-dossier cible (ex: `public_html/notionlab/`) et archiver le build precedent (zip horodate) avant ecrasement.
- Verifier que le secret SUPABASE_SERVICE_ROLE ne fuite pas dans les artefacts de build.
- Checklist UI post-deploy: (1) la page Admin Â« ThÃ¨mes Â» charge et peut activer un thÃ¨me; (2) DevTools > Issues/Compatibility ne signale pas d'absence de `backdrop-filter`/`-webkit-backdrop-filter` ni `text-size-adjust`/`-webkit-text-size-adjust`.
 - Logs Edge: visibles ~1 min; effectuer les tests immÃ©diatement aprÃ¨s soumission.
 - Notifications: conserver lâ€™implÃ©mentation Resend (pas dâ€™alternative SMTP) tant que lâ€™Ã©cosystÃ¨me de notifications du projet sâ€™appuie dessus.
<!-- AUTO:END -->


