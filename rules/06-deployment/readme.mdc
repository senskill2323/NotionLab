---
title: "NotionLab Guide IA - Module Formations"
version: "2"
date: "2025-01-18"
owner: "NEEDS-VERIFY Provide owner or primary contact."
description: Environnements versionnés, CI/CD GitHub Actions avec build/tests/déploiement, gestion secrets, healthchecks, monitoring Sentry/Uptime, logs, alerting, DNS, cache, CDN.
---

<!-- AUTO:BEGIN -->
<!-- ANCHOR:OVERVIEW -->
Le deploiement du module Formations s'appuie sur les scripts npm, les scripts deploy.* et un workflow GitHub Actions en mode FTPS.

<!-- ANCHOR:STANDARDS -->
- Scripts npm :
  - npm run dev (serveur Vite pour formations et builder).
  - npm run build (build production Vite).
  - npm run preview (serveur de preview).
  - npm run db:query "<SQL>" et npm run db:file <path> pour executer des requetes Postgres via scripts/run-sql.js.
- Scripts shell : deploy.sh et deploy.bat reconstruisent dist/ et listent les assets avant transfert.
- Secrets requis : FTP_* et VITE_SUPABASE_* doivent etre disponibles pour les pipelines.
- Migrations thèmes: `Supabase/migrations/2025-09-18_themes_and_rpcs.sql` versionne `public.themes` + RPCs (`get_active_theme_tokens`, `set_active_theme`).
 - Onboarding formation (Edge Function & secrets):
   - Fonction Edge: `Supabase/functions/notify-training-onboarding/` (Deno, TypeScript) — mécanisme conservé via Resend.
   - Secrets requis (projet Supabase):
     - `RESEND_API_KEY`
     - `ONBOARDING_NOTIFICATION_EMAIL` (fallback: `OWNER_EMAIL`)
     - `ONBOARDING_EMAIL_FROM` (fallback: `SENDER_EMAIL`)
   - CORS: `Access-Control-Allow-Methods: POST, OPTIONS` et gestion du preflight `OPTIONS`.
 - Assistant (Edge Functions & secrets):
      - Fonctions à déployer:
        - `Supabase/functions/realtime-offer/` (proxy WebRTC → OpenAI Realtime; `verify_jwt: true`)
        - `Supabase/functions/rag-search/` (proxy RAG → n8n; `verify_jwt: true`)
        - `Supabase/functions/memory/` (CRUD mémoire longue via proxy vers n8n; `verify_jwt: true`)
        - Ces Edge Functions sont déployées sur le projet Supabase NotionLab (Cloud). Les webhooks et le datastore RAG/mémoire résident sur un AUTRE compte Supabase, installé sur votre VPS (stack n8n via Docker).
      - Secrets requis (projet Supabase):
        - `OPENAI_API_KEY` (accès OpenAI Realtime)
        - (Optionnels Realtime) `OPENAI_REALTIME_MODEL` (défaut: `gpt-realtime`), `OPENAI_REALTIME_VOICE` (défaut: `verse`), `OPENAI_REALTIME_INSTRUCTIONS` (texte guidant la réponse vocale FR)
        - `N8N_RAG_WEBHOOK_URL` (URL du webhook n8n RAG)
        - `N8N_MEMORY_WEBHOOK_URL` (URL du webhook n8n Mémoire – écriture)
        - `N8N_MEMORY_SEARCH_URL` (URL du webhook n8n Mémoire – lecture)
        - (Optionnels, sécurité n8n) `N8N_RAG_TOKEN`, `N8N_MEMORY_WRITE_TOKEN`, `N8N_MEMORY_SEARCH_TOKEN` (ou fallback unique `N8N_MEMORY_TOKEN`). Les Edge Functions ajoutent automatiquement `?token=...` si présents.
        - (Optionnel, debug rapide) `ASSISTANT_BYPASS_ROLE=1` pour contourner temporairement la vérification de rôle lors d’un diagnostic (à retirer ensuite)
        - `SUPABASE_URL`, `SUPABASE_ANON_KEY` (déjà requis par l’infra)
        - Exemple prod (RAG): `N8N_RAG_WEBHOOK_URL=https://senskill.duckdns.org/webhook/rag-search`
        - Exemple prod (Mémoire): `N8N_MEMORY_WEBHOOK_URL=https://senskill.duckdns.org/webhook/memory-write`
        - Exemple prod (Mémoire lecture): `N8N_MEMORY_SEARCH_URL=https://senskill.duckdns.org/webhook/memory-search`
      - CORS: `POST, OPTIONS` et gestion du preflight `OPTIONS` pour chaque fonction. En‑têtes autorisés: `authorization, content-type, apikey, x-client-info, x-supabase-authorization`.
      - Note dev: `vite.config.js` autorise localement `Permissions-Policy: microphone=(self), camera=(self)` pour les tests; en production, configurer ces en‑têtes au niveau de l’hébergement.

    - Pas‑à‑pas « Secrets n8n » (Cloud → Edge Functions) :
      1. Ouvrir le Dashboard Supabase (projet Cloud NotionLab) → Edge Functions → Settings/Secrets.
      2. Ajouter les secrets requis: `N8N_RAG_WEBHOOK_URL`, `N8N_MEMORY_WEBHOOK_URL`, `N8N_MEMORY_SEARCH_URL`.
      3. (Optionnel) Ajouter `N8N_RAG_TOKEN`, `N8N_MEMORY_WRITE_TOKEN`, `N8N_MEMORY_SEARCH_TOKEN` (ou `N8N_MEMORY_TOKEN`).
      4. Publier/Redeployer: `realtime-offer`, `rag-search`, `memory`.
      5. Tester immédiatement (fenêtre de logs ~1 min): RAG, Mémoire (lecture/écriture), Realtime.

    - Pas‑à‑pas « Realtime OpenAI » :
      1. Secrets: poser `OPENAI_API_KEY`. Optionnellement poser `OPENAI_REALTIME_MODEL=gpt-realtime`, `OPENAI_REALTIME_VOICE=verse`, `OPENAI_REALTIME_INSTRUCTIONS="Tu es l’assistante NotionLab…"`.
      2. Déployer `realtime-offer`.
      3. Test: ouvrir l’Assistant → le badge doit passer « Connecté ». En cas d’erreur, consulter `functions/v1/realtime-offer` (Network) et les logs Edge.

    - Correctif « profils.user_type » sur Cloud (si 403 Forbidden dans `realtime-offer`):
      1. Ajouter la colonne si absente et la contrainte (idempotent):
         ```sql
         do $$
         begin
           if not exists (
             select 1 from information_schema.columns
             where table_schema = 'public'
               and table_name   = 'profiles'
               and column_name  = 'user_type'
           ) then
             alter table public.profiles add column user_type text;
           end if;
         end $$;

         alter table public.profiles drop constraint if exists profiles_user_type_check;
         alter table public.profiles
           add constraint profiles_user_type_check
           check (user_type in ('owner','admin','client','guest'));

         alter table public.profiles alter column user_type set default 'guest';
         ```
      2. Renseigner l’utilisateur de test (exemple par UUID):
         ```sql
         insert into public.profiles (id, email, user_type)
         select u.id, u.email, 'client' from auth.users u where u.id = '<UUID>'
         on conflict (id) do update set user_type = excluded.user_type, email = excluded.email;
         ```
      3. Réessayer l’Assistant.

<!-- ANCHOR:WORKFLOWS -->
- Workflow GitHub Actions (.github/workflows/deploy.yml) :
  - Declenchement sur push de tags v*.
  - Etapes : checkout, verification des secrets, installation Node 20, npm ci, npm run build, verification dist/index.html, deploiement via SamKirkland/FTP-Deploy-Action en mode dangerous-clean-slate.
- Execution SQL : npm run db:query ou npm run db:file utilisent scripts/run-sql.js avec les credentiels .env.local ou DATABASE_URL.
- Application migration thèmes (local/dev/prod):
  1. Vérifier .env.local/.env (DATABASE_URL ou PG*).
  2. `npm run db:file "Supabase/migrations/2025-09-18_themes_and_rpcs.sql"` ou coller le SQL dans l'éditeur Supabase.
  3. Confirmer via `select get_active_theme_tokens();` et un test `select set_active_theme('<uuid>');` (admin/owner requis).
 - Déploiement Assistant (Edge Functions & DB):
      1. Créer/Mettre à jour les fonctions Edge:
         - `realtime-offer` (proxy OpenAI Realtime)
         - `rag-search` (proxy n8n)
         - `memory` (CRUD mémoire)
         Activer `verify_jwt` (par défaut) et poser les secrets: `OPENAI_API_KEY`, `N8N_RAG_WEBHOOK_URL`.
      2. Appliquer la migration DB: `Supabase/migrations/2025-09-20_assistant_memory.sql` (création de `public.assistant_memories` + RLS).
      3. Tester immédiatement:
         - `realtime-offer`: retour 200 avec `{ sdp }`.
         - `rag-search`: retour `{ answer, sources? }`; vérifier « unavailable » si le webhook n8n est hors ligne.
         - `memory`: `action='get'` puis `action='update'`.
      4. Sur l’app, avec un compte `owner/admin/client`: ouvrir « Assistant », tester micro/caméra, snapshot, upload, requête texte, « Montrer les sources ».

    - Déploiement Admin « IAssistant » (config globale):
      1. Appliquer la migration: `Supabase/migrations/2025-09-20_assistant_admin.sql`.
         - Création `public.assistant_settings` (singleton GLOBAL), `public.assistant_limits`, `public.assistant_metrics` + RLS (lecture auth, écriture owner; métriques: insert auth, select owner).
      2. Redéployer `realtime-offer`, `rag-search`, `memory` (prise en compte du kill‑switch `assistant_settings.enabled` et des messages standard).
      3. UI: onglet Admin `IAssistant` (owner‑only) — page `src/pages/admin/AssistantAdminPage.jsx` déjà créée.
         - Paramètres: instructions système (FR/tutoiement), voix, vitesse, bascules audio/texte/vision, push‑to‑talk, messages, kill‑switch.
         - Intégrations: URLs RAG/memory (affichées; édition optionnelle), écriture mémoire par défaut.
         - Tests: pré‑écoute (à venir), session Realtime test (à venir), test RAG/mémoire, journaux récents.
         - Observabilité & limites: métriques globales, limites globales (durée, débit, contexte RAG) appliquées immédiatement.

    - Datastore Assistant (Supabase VPS n8n) — séparé du NotionLab Cloud:
      - Important: ne pas appliquer ces opérations au Supabase NotionLab Cloud.
      - Extensions à activer: `vector`, `pg_trgm`.
      - Tables à créer: `resources` (titre, contenu, url?, tags, embedding vector(1536)), `assistant_memory` (JSON par utilisateur), `conversations` (optionnelle).
      - Indexation: GIN trigram sur `title`, GIN sur `tags`, IVFFLAT sur `embedding` (cosine/dot selon besoin).
      - RLS: `assistant_memory` = own‑only (`auth.uid() = user_id`), `conversations` = own‑only; `resources` = lecture pour utilisateurs authentifiés (affiner au besoin par tags/collection).
      - Fonction SQL: `match_resources(query_emb, top_k, in_tags, in_collection)` exposée via PostgREST.
      - n8n:
        - Webhook reçoit au minimum `{ query, userId, top_k }` (top_k optionnel).
        - Étapes: (1) embedding de `query` (OpenAI), (2) appel PostgREST `match_resources`, (3) formatage `{ passages, sources }`, (4) réponse webhook.
 - Déploiement Onboarding (Edge Function):
   1. Ouvrir le Dashboard Supabase → Edge Functions → `notify-training-onboarding`.
   2. Vérifier/poser les secrets: `RESEND_API_KEY`, `ONBOARDING_NOTIFICATION_EMAIL` (ou `OWNER_EMAIL`), `ONBOARDING_EMAIL_FROM` (ou `SENDER_EMAIL`).
   3. Déployer/Publier la fonction (verify_jwt: true par défaut).
   4. Tester immédiatement une soumission depuis l'app (fenêtre de logs ~1 min).
   - Première soumission: email « Nouveau brief d’onboarding NotionLab – {Nom} ».
   - Resoumission: email « Brief d’onboarding mis à jour – {Nom} ».
   - En absence de `RESEND_API_KEY`: la fonction retourne `delivered: false` et loggue les champs envoyés (à ne pas laisser en prod).

<!-- ANCHOR:ACCOUNT_DELETION_DEPLOYMENT -->
- Suppression totale de compte (Auth + identités + données liées)
  - RPC à déployer: `public.admin_delete_user_full(p_user_id uuid)` [SECURITY DEFINER].
  - Déploiement (local/dev/prod):
    1. Ouvrir l'éditeur SQL Supabase du projet actif (même project‑ref que l'app).
    2. Coller la définition de la fonction et exécuter:
       - `create or replace function public.admin_delete_user_full(p_user_id uuid) returns json language plpgsql security definer ...` (voir doc DB).
       - `grant execute on function public.admin_delete_user_full(uuid) to authenticated;`
    3. Redémarrer l'app si nécessaire (les appels `supabase.rpc(...)` sont côté client).
    4. Vérifier via un test rapide: `select public.admin_delete_user_full('<USER_UUID>');`
  - Intégration UI (déjà appliquée):
    - `src/components/admin/UserManagementPanel.jsx` → corbeille → `supabase.rpc('admin_delete_user_full', { p_user_id })`
    - `src/pages/admin/ManageUserPage.jsx` → bouton supprimer → même RPC
    - `src/components/account/DeleteAccountSection.jsx` → auto‑suppression → même RPC
  - Post‑checks SQL (attendus = 0 ligne): `auth.users`, `auth.identities`, `public.profiles`, `public.user_formation_snapshots`, `public.user_formations`, `public.formation_submissions`, `public.formation_module_statuses`, `public.ticket_replies`, `public.tickets` (user_id | assigned_to), `public.action_logs` (actor_id), `public.chat_conversations` (guest_id), `public.chat_messages` (via join sur conversations).
  - Rollback: re‑créer l’utilisateur si nécessaire; la fonction étant idempotente, une ré‑exécution ne recrée rien.

<!-- ANCHOR:EXAMPLES -->
```bash
npm run build
./deploy.sh
```
```txt
Supabase → Edge Functions → notify-training-onboarding
Secrets:
- RESEND_API_KEY=... (obligatoire)
- ONBOARDING_NOTIFICATION_EMAIL=yann@bluewin.ch (ou OWNER_EMAIL)
- ONBOARDING_EMAIL_FROM=notifications@notionlab.co (ou SENDER_EMAIL)
```

<!-- ANCHOR:LIMITS -->
- Surveiller le mode dangerous-clean-slate de l'action FTPS (nettoyage complet avant upload).
- Verifier que le secret SUPABASE_SERVICE_ROLE ne fuite pas dans les artefacts de build.
- Checklist UI post-deploy: (1) la page Admin « Thèmes » charge et peut activer un thème; (2) DevTools > Issues/Compatibility ne signale pas d'absence de `backdrop-filter`/`-webkit-backdrop-filter` ni `text-size-adjust`/`-webkit-text-size-adjust`.
 - Logs Edge: visibles ~1 min; effectuer les tests immédiatement après soumission.
 - Notifications: conserver l’implémentation Resend (pas d’alternative SMTP) tant que l’écosystème de notifications du projet s’appuie dessus.
<!-- AUTO:END -->
