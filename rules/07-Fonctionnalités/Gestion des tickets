Résumé

Gestion tickets scindée client (TicketsPage, TicketDetailPage) et admin (TicketManagementPanel, ManageTicketPage) avec mêmes tables Supabase; UX riche (filtres, bulk) mais logique autorisation côté client uniquement.
Données critiques (status, priority, duplication/suppression) manipulées directement via @supabase/supabase-js sans garde serveur ni vérification permission effective; aucune trace RLS/policies pour public.tickets / public.ticket_replies → risque majeur.
Realtime présent (tickets, replies) mais rafraîchissement complet systématique côté admin, absence de throttling; enrichissements hasNew*Reply côté client/admin reposent sur colonnes *_last_viewed_at.
Incohérences d’encodage (é cassés) et schéma partiel (aucune migration de création de tickets/ticket_replies, champs utilisés comme summary, reference_number non documentés).
Stack

React 18 + hooks (useState, useEffect, useCallback), React Router v6 (useNavigate, guards) src/pages/TicketsPage.jsx:15, src/pages/admin/ManageTicketPage.jsx:16.
UI shadcn (Card, Tabs, Table, Select…), framer-motion pour animations, lucide-react pour icônes.
Supabase JS client (src/lib/customSupabaseClient.js) commun.
CSV export via papaparse src/pages/TicketDetailPage.jsx:18.
API publique (exports/props/hooks)

TicketsPage (default) src/pages/TicketsPage.jsx:15 — liste personnelle, modifs updateTicket(ticketId, updates).
TicketDetailPage (default) src/pages/TicketDetailPage.jsx:23 — vue détail + replies, expose actions internes (handleStatusChange, CSV).
CreateTicketPage (default) src/pages/CreateTicketPage.jsx:15 — formulaire création.
TicketManagementPanel (default) src/components/admin/TicketManagementPanel.jsx:15 — dashboard admin, prop optionnelle onDataChange.
ManageTicketPage (default) src/pages/admin/ManageTicketPage.jsx:16 — détail admin.
TicketsPanel (default) src/components/dashboard/modules/TicketsPanel.jsx:18 — widget tableau de bord client, prop editMode.
ReplyCard (default) src/components/ReplyCard.jsx:5 — carte réponse.
Structure (fichiers)

Pages client: src/pages/TicketsPage.jsx, TicketDetailPage.jsx, CreateTicketPage.jsx.
Pages admin: src/pages/admin/ManageTicketPage.jsx, composant panel src/components/admin/TicketManagementPanel.jsx.
Dashboard module client: src/components/dashboard/modules/TicketsPanel.jsx.
Assets/support: src/components/ReplyCard.jsx, toasts/UI dans src/components/ui/*.
Migrations tickets: seulement colonnes vue (Supabase/migrations/2025-09-23_add_*_ticket_view_tracking.sql).
Dépendances internes/externes

Internes: useAuth, usePermissions, useToast, ModuleHeader, ReplyCard.
Externes: @supabase/supabase-js, framer-motion, papaparse, lucide-react.
Aucune abstraction service → appels Supabase disséminés.
Flux de données

Client list (TicketsPage): fetch tickets par user_id, filtre tabs, updates direct via updateTicket puis toast src/pages/TicketsPage.jsx:37-82.
Client détail (TicketDetailPage): charge ticket + replies, marque vue (client_last_viewed_at), insert reply; realtime updates pour replies/statut src/pages/TicketDetailPage.jsx:84-159.
Admin panel (TicketManagementPanel): fetch tickets + profils assignables, enrichit hasNewClientReply, push onDataChange, refetch sur realtime tickets src/components/admin/TicketManagementPanel.jsx:26-131.
Admin détail (ManageTicketPage): charge ticket, replies, admins; update champs via handleUpdate; realtime sur replies et ticket src/pages/admin/ManageTicketPage.jsx:35-151.
Dashboard widget (TicketsPanel): fetch user tickets, enrichit hasNewAdminReply, bulk actions duplication/suppression, navigation src/components/dashboard/modules/TicketsPanel.jsx:40-215.
État & effets

Multiples useState pour listes, filtres, formulaires; useEffect initialisation + dépendances (e.g. fetchTickets sur user/perms).
Refs anti double marquage vue (markViewInFlightRef client/admin) src/pages/TicketDetailPage.jsx:17-42, src/pages/admin/ManageTicketPage.jsx:19-43.
useMemo pour regroupements et stats absents côté admin? (non; admin panel regroupe via useMemo src/components/admin/TicketManagementPanel.jsx:142-168).
I/O DB (PostgREST/RPC/SQL)

Sélection tickets: supabase.from('tickets').select(...).order src/components/admin/TicketManagementPanel.jsx:32-46, src/pages/TicketsPage.jsx:37-48, src/components/dashboard/modules/TicketsPanel.jsx:70-86.
Sélection replies: supabase.from('ticket_replies').select(...) src/components/admin/TicketManagementPanel.jsx:55-70, src/pages/TicketDetailPage.jsx:101-114, src/pages/admin/ManageTicketPage.jsx:60-74.
Insertion ticket: supabase.from('tickets').insert([...]) src/pages/CreateTicketPage.jsx:54-67; duplication bulk src/components/dashboard/modules/TicketsPanel.jsx:200-213.
Update ticket champs (status/priority/assignee/summary/view timestamps): src/components/admin/TicketManagementPanel.jsx:187-207, src/pages/admin/ManageTicketPage.jsx:153-170, src/pages/TicketsPage.jsx:54-81, src/pages/TicketDetailPage.jsx:166-190, src/components/dashboard/modules/TicketsPanel.jsx:135-163.
Delete ticket (client bulk) sans filtre user: src/components/dashboard/modules/TicketsPanel.jsx:179-195.
Insert reply: src/pages/TicketDetailPage.jsx:160-176, src/pages/admin/ManageTicketPage.jsx:167-188.
Migration SQL: seules colonnes client_last_viewed_at / admin_last_viewed_at ajoutées Supabase/migrations/2025-09-23_add_client_ticket_view_tracking.sql:2-5, ..._add_admin_ticket_view_tracking.sql:2-5; absence création/table policies.
Realtime (listen/broadcast)

Abonnement tickets (events *) admin panel src/components/admin/TicketManagementPanel.jsx:118-128 → déclenche refetch complet.
Abonnements ticket_replies + tickets scoped par ticket_id sur détails client/admin src/pages/TicketDetailPage.jsx:134-154, src/pages/admin/ManageTicketPage.jsx:120-131.
Pas de channel côté TicketsPanel (client dashboard) → rafraîchissement sur focus/fetch uniquement.
Sécurité (RLS, XSS, CSRF)

RLS: aucune migration ALTER TABLE ... ENABLE ROW LEVEL SECURITY ni policies pour public.tickets/ticket_replies; clients et admins modifient via clé anon → risque critique (lecture/écriture cross-user).
Autorisations client: TicketsPanel met à jour/supprime sans eq('user_id', user.id) dans delete/duplicate src/components/dashboard/modules/TicketsPanel.jsx:179-213; possible manipulation ID (devtools) faute RLS.
Admin routes protégées par ProtectedRoute (tickets:view_all) mais côté DB rien n’empêche un client d’appeler RPC POSTgREST.
XSS: contenus tickets/replies affichés via React -> échappés; pas de sanitisation pour CSV export (injection possible côté Excel).
CSRF: appels fetch JS → besoin session; Supabase GoTrue gère tokens; pas de double soumission major.
Intégrité: colonnes client_last_viewed_at/admin_last_viewed_at mises à jour côté client/admin; sans triggers RLS un acteur peut se marquer viewed pour masquer notifications.
Schéma incomplet (pas de création table/policy). Urgent: ajouter scripts SQL (creation, RLS, fonctions fencées) & restreindre updates via RPC sécurisées plutôt que direct client.