Résumé

Builder Blueprint = carte mentale ReactFlow avec sauvegarde Supabase des tables blueprints, blueprint_nodes, blueprint_edges (src/hooks/useBlueprintBuilder.js:129, Supabase/migrations/2025-10-07_blueprint_mindmap_module.sql:3).
L’ouverture /blueprint-builder sans ID crée toujours un nouveau blueprint car l’effet déclenche createBlueprint() avant la fin de fetchBlueprints() (src/hooks/useBlueprintBuilder.js:339).
Le header ne câblant ni partage ni export JSON malgré les props passées : seul le panneau dashboard permet de générer un lien (src/pages/BlueprintBuilderPage.jsx:188, src/components/blueprints/BlueprintBuilderHeader.jsx:45).
Les actions (autosave, duplication, snapshot, partage) utilisent des RPC dédiées (src/lib/blueprints/blueprintApi.js:27, Supabase/migrations/2025-10-07_blueprint_mindmap_module.sql:427).
Historique local (undo/redo), timers d’autosave et palette DnD sont maintenus côté client sans collaboration temps réel (src/hooks/useBlueprintBuilder.js:69).
Module dashboard BlueprintsPanel liste/partage via presse-papiers (src/components/dashboard/modules/BlueprintsPanel.jsx:7).
Route sécurisée par ProtectedRoute/PermissionsContext, RLS propriétaire/admin + partages publics via tokens actifs (App.jsx:116, src/contexts/PermissionsContext.jsx:36, Supabase/migrations/2025-10-07_blueprint_mindmap_module.sql:114, 319).
Aucun flux Realtime ni gestion d’expiration par défaut des tokens de partage (Supabase/migrations/2025-10-07_blueprint_mindmap_module.sql:729).
Plan d’action

Séquencer l’initialisation pour charger la liste avant de créer un nouveau blueprint.
Brancher les actions de partage/export dans le header avec copie du lien.
Exposer la gestion des liens (copie, expiration) directement dans le builder.
Stack

React 18 + React Router 6 (src/pages/BlueprintBuilderPage.jsx:1), ReactFlow (src/components/blueprints/BlueprintCanvas.jsx:1), DnD Kit (src/components/blueprints/BlueprintPalette.jsx:2).
Supabase JS 2 via client custom pour RPC/PostgREST (src/lib/blueprints/blueprintApi.js:1).
UI : Tailwind + shadcn (Button/Input/Tooltip) (src/components/blueprints/BlueprintBuilderHeader.jsx:6), lucide-react icônes, date-fns pour timestamps (src/components/blueprints/BlueprintBuilderHeader.jsx:3).
Utilitaires : use-debounce pour autosave, uuid pour nodes, html-to-image pour exports (src/pages/BlueprintBuilderPage.jsx:87).
API publique (exports/props/hooks)

useBlueprintBuilder() retourne { state, setters, actions } (nodes, edges, CRUD, snapshot, share) (src/hooks/useBlueprintBuilder.js:60).
Pages exportées : BlueprintBuilderPage & BlueprintSharePage (src/pages/BlueprintBuilderPage.jsx:1, src/pages/BlueprintSharePage.jsx:1).
Composants : BlueprintCanvas + exports blueprintNodeTypes & blueprintDefaultEdgeOptions (src/components/blueprints/BlueprintCanvas.jsx:39), BlueprintPalette + getDefaultBlueprintPalette() (src/components/blueprints/BlueprintPalette.jsx:8), BlueprintBuilderHeader (src/components/blueprints/BlueprintBuilderHeader.jsx:45).
Dashboard : BlueprintsPanel module (src/components/dashboard/modules/BlueprintsPanel.jsx:1).
API client : listBlueprints, getBlueprintById, upsertBlueprintGraph, deleteBlueprint, duplicateBlueprint, createBlueprintSnapshot, createBlueprintShare, getBlueprintPublic, renameBlueprint, updateBlueprintMetadata (src/lib/blueprints/blueprintApi.js:27).
Structure (fichiers)

Pages : src/pages/BlueprintBuilderPage.jsx, src/pages/BlueprintSharePage.jsx.
Hook métier : src/hooks/useBlueprintBuilder.js.
UI builder : src/components/blueprints/{BlueprintCanvas,BlueprintPalette,BlueprintBuilderHeader,BlueprintInspector}.jsx.
Dashboard widget : src/components/dashboard/modules/BlueprintsPanel.jsx.
API Supabase : src/lib/blueprints/blueprintApi.js.
Schéma/RPC : Supabase/migrations/2025-10-07_blueprint_mindmap_module.sql.
Dépendances internes/externes

Externes clés : ReactFlow, @dnd-kit, use-debounce, uuid, html-to-image, date-fns, lucide-react.
Internes : useToast, providers Auth/Permissions, navigation via ProtectedRoute, BlueprintPalette catalog statique.
Supabase RPC & tables dédiées (blueprints + nodes/edges + snapshots + shares).
Flux de données

Chargement builder : fetchBlueprints() (RPC list_blueprints) puis effect navigue/crée (src/hooks/useBlueprintBuilder.js:101, 340).
Chargement ciblé : getBlueprintById hydrate nodes/edges et état local (src/hooks/useBlueprintBuilder.js:241).
Sauvegarde : autosave/manual via persistGraph -> RPC blueprints_upsert_graph (src/hooks/useBlueprintBuilder.js:129).
Actions : duplication/suppression/snapshot/partage -> RPC dédiées (src/lib/blueprints/blueprintApi.js:103, 112, 123).
Dashboard : BlueprintsPanel lit liste, copie lien de partage (src/components/dashboard/modules/BlueprintsPanel.jsx:17).
Partage public : BlueprintSharePage consomme token -> RPC get_blueprint_public -> ReactFlow read-only (src/pages/BlueprintSharePage.jsx:40).
État & effets

Hook maintient nodes/edges + refs pour history, autosave, debounce (src/hooks/useBlueprintBuilder.js:69).
Effets : autosave (timer + retry), hydratation blueprint, navigation initiale, listeners sur sélection (src/hooks/useBlueprintBuilder.js:170, 214, 339).
Historique undo/redo via historyRef (max 50 snapshots) (src/hooks/useBlueprintBuilder.js:90).
Builder page : DnD sensors, export (html-to-image) et filtrage palette (src/pages/BlueprintBuilderPage.jsx:16).
I/O DB (PostgREST/RPC/SQL)

RPC : list_blueprints, get_blueprint, blueprints_upsert_graph, duplicate_blueprint, create_blueprint_snapshot, create_blueprint_share, get_blueprint_public (Supabase/migrations/2025-10-07_blueprint_mindmap_module.sql:367-807).
Tables directes : blueprints (insert/delete/update rename/metadata) (src/lib/blueprints/blueprintApi.js:98, 140).
Shares exposés à anon via RLS + RPC (lecture lecture seule).
Snapshots stockés JSON payload.
Realtime (listen/broadcast)

Aucun abonnement ou broadcast Supabase/WS ; toute synchro est locale et via rechargement.
Sécurité (RLS, XSS, CSRF)

RLS propriétaire/admin sur blueprints/nodes/edges/snapshots (policies blueprints_*, blueprint_nodes_manage, etc.) (Supabase/migrations/2025-10-07_blueprint_mindmap_module.sql:116, 200).
Partage public : policy blueprint_shares_read_public autorise anon uniquement sur tokens actifs/valides (Supabase/migrations/2025-10-07_blueprint_mindmap_module.sql:319).
Front : route builder protégée par ProtectedRoute + permission client_blueprints:view_module; nav contrôlée par component_rules (App.jsx:116, Supabase/migrations/2025-10-07_blueprint_mindmap_module.sql:842).
Contenu rendu en React JSX (échappement automatique) limitant XSS ; partage tokenisé, pas de CSRF côté Supabase (appels RPC explicites).