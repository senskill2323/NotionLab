- Helper partagé : volumes/functions/_shared/email.ts centralise l'envoi SMTP (Hostinger) et alimente send-email ainsi que notify-training-onboarding.
Résumé

UI admin dédiée pour créer, éditer, tester et supprimer les gabarits d’e-mails transactionnels stockés dans Supabase (src/components/admin/EmailNotificationsPanel.jsx:118).
Edge Function send-email orchestre la personnalisation et l’envoi SMTP en se basant sur les entrées email_notifications (Supabase/functions/send-email/index.ts:299).
Migration associe le module au dashboard admin, définit RLS et préférences utilisateurs (Supabase/migrations/2025-11-05_admin_email_notifications_module.sql:3).
Script SQL pré-remplit les templates auth standards (signup, invite, recovery, etc.) (sql/seed_email_notifications.sql:323).

Stack

Front: React 18 + react-hook-form + Zustand-free local state, composants shadcn/Radix (AlertDialog, Dialog, Switch, Table), éditeur riche Tiptap, icônes Lucide (src/components/admin/EmailNotificationsPanel.jsx:14).
Data access: Supabase JS client pour PostgREST + invoke d’Edge Function (src/components/admin/EmailNotificationsPanel.jsx:145, :364).
Edge: Deno runtime, @supabase/supabase-js@2.46.1, svix Webhook verify, smtp client TLS (Supabase/functions/send-email/index.ts:3).
Infra: Tables Postgres email_notifications, user_email_notification_preferences, triggers set_updated_at, permissions admin:manage_email_notifications (Supabase/migrations/2025-11-05_admin_email_notifications_module.sql:3).

API publique

EmailNotificationsPanel (default export) rendu via registre admin -> onglet email_notifications (src/pages/AdminDashboardPage.jsx:30, :50).
Endpoint POST /functions/v1/send-email (webhook + mode test via x-send-email-test) (Supabase/functions/send-email/index.ts:299).
Tables exposées: public.email_notifications (CRUD + policies) et public.user_email_notification_preferences (gestion opt-in) (Supabase/migrations/2025-11-05_admin_email_notifications_module.sql:3, :66).
Script sql/seed_email_notifications.sql pour initialiser/mettre à jour les gabarits (sql/seed_email_notifications.sql:323).

Structure (fichiers)

src/components/admin/EmailNotificationsPanel.jsx — panneau complet (formulaire, tableau, preview, tests) (~760 lignes).
Supabase/functions/send-email/index.ts — fonction Edge de personnalisation/envoi + vérification webhook.
Supabase/migrations/2025-11-05_admin_email_notifications_module.sql — tables, RLS, permissions, wiring dashboard.
sql/seed_email_notifications.sql — seed HTML + métadonnées notifications par défaut.
rules/07-Fonctionnalités/Module de notification — placeholder vide (documentation manquante à compléter).

Dépendances

UI: react-hook-form + Controller pour champs Tiptap, uuid pour duplication (src/components/admin/EmailNotificationsPanel.jsx:25).
State utils: useMemo, useCallback, useEffect, toasts shadcn pour feedback (src/components/admin/EmailNotificationsPanel.jsx:118).
Supabase client supabase.from(...).select/insert/update/delete + supabase.functions.invoke (src/components/admin/EmailNotificationsPanel.jsx:145, :364).
Edge: @supabase/supabase-js service role, svix.Webhook pour signatures, SmtpClient TLS, helpers applyTemplate, stripHtml, resolveRecipients (Supabase/functions/send-email/index.ts:102).

Flux de données

Chargement initial: fetchNotifications récupère email_notifications triées par updated_at (src/components/admin/EmailNotificationsPanel.jsx:142).
Création/édition: upsertNotification applique slug, upsert Supabase et rafraîchit l’état local (src/components/admin/EmailNotificationsPanel.jsx:195).
Duplication: clone la notification, force brouillon (is_active=false), insert puis prepend en liste (src/components/admin/EmailNotificationsPanel.jsx:316).
Tests: handleSendTest appelle l’Edge Function avec header x-send-email-test pour envoi ciblé (src/components/admin/EmailNotificationsPanel.jsx:352).
Envoi Edge: prepareEmail fusionne template + defaults + tokens Supabase Auth, sendEmail boucle sur destinataires via SMTP (Supabase/functions/send-email/index.ts:174, :254).
RLS admin: policies permettent modification uniquement aux admins (Supabase/migrations/2025-11-05_admin_email_notifications_module.sql:32).

État & effets

États locaux: notifications, loading, formOpen, editingNotification, pendingById, testingById, deleteTarget, previewingNotification, searchTerm (src/components/admin/EmailNotificationsPanel.jsx:120).
useEffect initial déclenche fetchNotifications (pas de realtime) (src/components/admin/EmailNotificationsPanel.jsx:161).
Formulaire RHF: handleSubmit -> onSubmit -> upsertNotification; Controller alimente Tiptap pour body_html (src/components/admin/EmailNotificationsPanel.jsx:421).
Toasts uniformisent feedback succès/erreur, pendingById verrouille switches pendant mutation (src/components/admin/EmailNotificationsPanel.jsx:270).
Preview Dialog rend HTML via dangerouslySetInnerHTML pour lecture rapide (src/components/admin/EmailNotificationsPanel.jsx:104).

I/O DB (PostgREST/RPC/SQL)

SELECT * FROM email_notifications ORDER BY updated_at DESC via Supabase JS (src/components/admin/EmailNotificationsPanel.jsx:145).
UPDATE/INSERT/DELETE sur email_notifications pour CRUD + duplication, avec updated_at manuel (src/components/admin/EmailNotificationsPanel.jsx:198, :219, :394).
Edge fetchNotification (Supabase/functions/send-email/index.ts:155) lit un template par notification_key.
user_email_notification_preferences créé côté SQL mais pas encore consommé côté app (Supabase/migrations/2025-11-05_admin_email_notifications_module.sql:66).
Seed script upsert les templates de base (sql/seed_email_notifications.sql:323).

Realtime (listen/broadcast)

Aucun canal realtime implémenté pour ce module; rafraîchissement manuel via bouton (src/components/admin/EmailNotificationsPanel.jsx:613).
Sécurité (RLS, XSS, CSRF)

RLS: lectures publiques seulement si is_active ou admin; mutations réservées aux admins (Supabase/migrations/2025-11-05_admin_email_notifications_module.sql:32).
user_email_notification_preferences protège chaque utilisateur via RLS par auth.uid() (Supabase/migrations/2025-11-05_admin_email_notifications_module.sql:87).
La route /functions/v1/send-email exige désormais une signature Svix calculée avec SEND_EMAIL_HOOK_SECRET (headers Authorization + Svix-Signature) pour toute requête « production »; seul le mode test avec x-send-email-test=1 contourne cette vérification (Supabase/functions/send-email/index.ts:300, :397).
UI Preview injecte HTML via dangerouslySetInnerHTML; réservé aux admins mais exiger confiance dans les contenus (src/components/admin/EmailNotificationsPanel.jsx:104).
TEST_EMAIL_RECIPIENT hardcodé ⇒ risque de fuite si oublié (src/components/admin/EmailNotificationsPanel.jsx:54); prévoir env côté client sécurisé.
