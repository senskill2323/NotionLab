Résumé

Gestionnaire d’apparence = ThemeProvider + ThemePanel admin; charge les tokens JSON des thèmes Supabase, les applique en CSS variables dynamiques, permet CRUD + activation par RPC.
Flux principal robuste (fallback local, prévisualisation instantanée) mais sécurité incomplète (pas de RLS, RPC security definer sans garde), validations faibles et encodage accentué.
Module dépend de Supabase (fetch/rpc), UI shadcn, react-color; aucune logique realtime.

Stack

React 18 (hooks, context), Vite, Supabase JS (@supabase/supabase-js), lucide-react, react-color, design system local (@/components/ui).
CSS dynamique via injection de <style> (HSL, CSS custom properties), tailwind classes util.

API publique (exports/props/hooks)

useTheme() (src/contexts/ThemeContext.jsx:7) → { theme, loading, refreshTheme(), applyTheme() }.
ThemeProvider (src/contexts/ThemeContext.jsx:85) → enveloppe l’app pour gérer thème.
ThemePanel (default export src/components/admin/ThemePanel.jsx:13) → panneau admin complet (fetch, preview, save).
ThemeEditor (src/components/admin/theme/ThemeEditor.jsx:10) → props { theme, onUpdateTheme, translations }.
ThemeLibrary (src/components/admin/theme/ThemeLibrary.jsx:22) → props { activeTheme, draftThemes, selectedTheme, onSelectTheme, onNewTheme, onDuplicateTheme, onDeleteTheme, onSetActiveTheme, isSaving }.
ThemeActions (src/components/admin/theme/ThemeActions.jsx:13) → props { theme, onDuplicate, onDelete, compact }.
initialTranslations (src/components/admin/theme/theme-constants.js:1) → mapping clé couleur → libellé/description.

Structure (fichiers)

src/contexts/ThemeContext.jsx — contexte global (load + DOM injection).
src/components/admin/ThemePanel.jsx — orchestrateur admin.
src/components/admin/theme/ThemeEditor.jsx — éditeur couleurs + descriptions.
src/components/admin/theme/ThemeLibrary.jsx — liste thèmes + actions.
src/components/admin/theme/ThemeActions.jsx — menu duplicata/suppression.
src/components/admin/theme/theme-constants.js — textes par défaut.
SQL: Supabase/migrations/2025-09-18_themes_and_rpcs.sql, 2025-09-30_add_chat_theme_tokens.sql.

Dépendances internes/externes

Internes: supabase client (src/lib/customSupabaseClient.js), useToast, composants UI (Card/Button/etc.), util cn.
Externes: @supabase/supabase-js, uuid, lucide-react, react-color (SketchPicker), react-helmet (en page).
Accès DOM direct (document, window) → incompatible SSR sans garde.

Flux de données

Démarrage: ThemeProvider applique fallback DEFAULT_THEME, lance RPC get_active_theme_tokens (timeout 6s) et applique CSS (injection <style id="dynamic-theme-style">) (src/contexts/ThemeContext.jsx:91-124).
Admin: ThemePanel récupère themes via supabase.from('themes').select('*'), stocke themes + selectedTheme.
Sélection/édition => ThemeEditor clone tokens, appelle onUpdateTheme → ThemePanel met à jour selectedTheme, déclenche prévisualisation via applyTheme du contexte (mutations DOM immédiates).
Sauvegarde => supabase.from('themes').update(...).eq('id', …); duplication via insert (UUID client); suppression via delete.
Activation => RPC set_active_theme puis refreshTheme() du contexte pour actualiser UI.

État & effets

ThemeProvider: theme, loading (useState), useEffect de démarrage (guard didInitRef), useCallback fetchAndApplyTheme.
ThemePanel: themes, selectedTheme, loading, isSaving; effets pour chargement initial & preview (sélection -> applyPreviewTheme), useMemo pour split actif/brouillons; callbacks pour CRUD.
ThemeEditor: isEditingName, tempName; useEffect resynchronise quand theme change.
ThemeLibrary: stateless hors props, gère interactions via callbacks.

I/O DB (PostgREST/RPC/SQL)

REST:
supabase.from('themes').select('*').order('is_default', { ascending: false }).order('name') (résultat directement exposé dans UI admin).
update, insert, delete sur public.themes (aucune validation côté client autre que existence).

RPC:
get_active_theme_tokens (stable, renvoie jsonb tokens) consommé par contexte et preview.
set_active_theme(p_theme_id uuid) (security definer) bascule drapeaux is_default.
SQL migrations: table public.themes (UUID PK, tokens jsonb, is_default unique index, triggers updated_at).
Pas d’utilisation du script scripts/run-sql.js dans module (réservé ops manuels).
Variables requises: VITE_SUPABASE_URL, VITE_SUPABASE_ANON_KEY (non vérifiées ici pour éviter d’exposer secrets).
Realtime (listen/broadcast)

Aucun canal Realtime, pas de supabase.channel ni broadcast → aucune synchro multi-clients.

Sécurité (RLS, XSS, CSRF)

Table public.themes sans ALTER TABLE ... ENABLE ROW LEVEL SECURITY ni policies (risque d’accès lecture/écriture par tout utilisateur authentifié/anon selon configuration) — cf. Supabase/migrations/2025-09-18_themes_and_rpcs.sql.
RPC set_active_theme SECURITY DEFINER sans garde (comment TODO) → exécution par tout rôle pouvant appeler l’RPC, potentielle élévation; absence de vérif role côté SQL ou signature.
Les tokens JSON peuvent contenir chaînes arbitraires; injection CSS possible (pas échappées) si rôles non admin y accèdent.
XSS/CSRF: interactions via Supabase JS (auth, fetch) → pas de CSRF classique, mais absence de validation côté client sur theme.name/descriptions (affichés via React, donc échappés). Rester vigilant sur surfaces HTML (Popover descriptions).
Encodage accent cassé dans theme-constants.js et toasts (thème → th�me) — probablement fichier enregistré en ISO; impact UX.