---
title: "NotionLab Guide IA - Module Formations"
version: "2"
date: "2025-01-18"
commit: "15da4f0"
owner: "NEEDS-VERIFY Provide owner or primary contact."
---

<!-- ANCHOR:FORMATIONS_OVERVIEW -->
## Vue d'ensemble - Module Formations
Le module Formations de NotionLab gère deux types de parcours d'apprentissage :
- **Formations standard** : Créées par les administrateurs, disponibles dans le catalogue public, avec workflow de soumission/validation pour inscription
- **Formations custom** : Créées par les clients via le builder, stockées comme brouillons, soumises pour validation avant mise en ligne

Architecture : React 18 + Vite 7 (frontend) + Supabase (backend) avec système de snapshot pour figer les parcours au moment de la validation, Kanban temps réel pour le suivi des modules, et gestion des permissions granulaires par rôle.

<!-- ANCHOR:FORMATIONS_STACK -->
## Stack et versions - Module Formations
| Element | Version | Usage dans Formations |
| --- | --- | --- |
| React Flow | 11.x | Builder visuel de parcours (src/pages/FormationBuilderPage.jsx) |
| @dnd-kit | 6.1.0/8.0.0/7.0.0 | Kanban drag & drop (src/components/kanban/) |
| ReactFlow | 11.x | Éditeur graphique de parcours (nodes/edges) |
| Framer Motion | 6.x | Animations UI (formation cards, transitions) |
| TipTap | 2.4.0 | Éditeur riche pour descriptions de modules |
| date-fns | 2.x | Formatage dates (created_at, enrolled_at) |
| Dagre | 0.8.x | Auto-layout des graphes de parcours |

Variables d'environnement spécifiques :
| Clé | Usage |
| --- | --- |
| VITE_SUPABASE_URL | Connexion Supabase pour RPCs formations |
| VITE_SUPABASE_ANON_KEY | Authentification client pour formations |

<!-- ANCHOR:FORMATIONS_STRUCTURE -->
## Structure des dossiers - Module Formations
```
src/
├── pages/
│   ├── FormationsPage.jsx              # Catalogue public des formations
│   ├── FormationDetailPage.jsx         # Détail formation + CTA soumission
│   ├── FormationBuilderPage.jsx        # Builder graphique (ReactFlow)
│   └── admin/
│       ├── CreateFormationPage.jsx     # NEEDS-VERIFY Exists?
│       └── ManageFormationPage.jsx     # NEEDS-VERIFY Exists?
├── components/
│   ├── formation/                      # Composants détail formation
│   │   ├── FormationHeader.jsx
│   │   ├── FormationProgram.jsx
│   │   ├── FormationSidebar.jsx
│   │   └── FormationStats.jsx
│   ├── builder/                        # Builder de parcours
│   │   ├── BuilderHeader.jsx           # Actions : sauver, dupliquer, soumettre
│   │   ├── ModuleCatalog.jsx           # Catalogue modules drag & drop
│   │   ├── CustomNode.jsx              # Nœuds ReactFlow personnalisés
│   │   └── StartNode.jsx               # Nœud de départ
│   ├── kanban/                         # Suivi progression modules
│   │   ├── KanbanPanel.jsx             # Interface principale Kanban
│   │   ├── KanbanColumn.jsx            # Colonnes (À faire, En cours, etc.)
│   │   └── KanbanCard.jsx              # Cartes modules
│   ├── dashboard/modules/
│   │   ├── FormationsPanel.jsx         # Liste formations client
│   │   └── UserFormationStatusSelect.jsx # Sélecteur statut formation
│   └── admin/
│       ├── FormationManagementPanel.jsx # Gestion formations + soumissions
│       ├── formation-management/        # Composants gestion admin
│       │   ├── FormationCard.jsx        # Carte formation (gallery view)
│       │   ├── FormationListView.jsx    # Vue liste formations
│       │   ├── AdminFormationStatusSelect.jsx
│       │   ├── AdminFormationTypeSelect.jsx
│       │   └── AdminFormationDeliveryModeSelect.jsx
│       └── formation-live/              # Gestion soumissions live
│           ├── SubmissionCard.jsx       # Carte soumission
│           ├── AdminKanbanView.jsx      # Vue Kanban admin
│           └── UserKanbanDashboard.jsx  # Dashboard Kanban utilisateur
├── hooks/
│   ├── useFormationBuilder.js          # Logique builder (save, undo/redo, submit)
│   └── useSubmissions.js               # Gestion soumissions
├── lib/builder/
│   ├── parcoursApi.js                  # API parcours (CRUD, catalog)
│   └── parcoursUtils.js                # Utilitaires parcours
└── contexts/
    └── BuilderCatalogContext.jsx       # Cache catalogue modules
```

<!-- ANCHOR:FORMATIONS_AUTH -->
## Authentification et permissions - Module Formations
### Rôles et permissions
| Rôle | Permissions formations | Accès |
| --- | --- | --- |
| client, vip, guest | `builder:view`, `builder:edit_own_parcours` | Créer/éditer ses parcours custom, soumettre pour validation |
| admin | `admin:access_dashboard`, `formations:manage_all` | Gérer toutes formations, valider soumissions |
| owner | Bypass toutes permissions | Accès complet |

### Guards de routes
```javascript
// Routes formations dans src/App.jsx
/formations                    # Public (catalogue)
/formation/:id                 # Public (détail + soumission si connecté)
/formation-builder             # ProtectedRoute (builder:view)
/formation-builder/:id         # ProtectedRoute (builder:edit_own_parcours)
/dashboard                     # ClientOnlyRoute (FormationsPanel)
/admin/dashboard               # ProtectedRoute (admin:access_dashboard)
```

### Contrôles d'accès spécifiques
- **Builder** : Utilisateurs peuvent uniquement éditer leurs propres parcours (`author_id = auth.uid()`)
- **Soumissions** : RLS sur `formation_module_statuses` limite l'accès aux modules de l'utilisateur
- **Catalogue** : Seuls les modules des formations `standard` + `live` sont exposés dans le builder client

<!-- ANCHOR:FORMATIONS_DATA -->
## Modèle de données - Module Formations
### Tables principales
```sql
-- Table courses : formations standard et custom
CREATE TABLE courses (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  title text NOT NULL,
  course_type text CHECK (course_type IN ('standard', 'custom')) DEFAULT 'standard',
  status text CHECK (status IN ('draft', 'a_valider', 'live', 'archived')) DEFAULT 'draft',
  nodes jsonb DEFAULT '[]'::jsonb,  -- Graphe ReactFlow (modules)
  edges jsonb DEFAULT '[]'::jsonb,  -- Connexions entre modules
  author_id uuid REFERENCES auth.users(id),
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- Table formation_module_statuses : suivi Kanban par utilisateur
CREATE TABLE formation_module_statuses (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  submission_id uuid NOT NULL,  -- Lien vers soumission approuvée
  module_uuid uuid NOT NULL,    -- ID du module dans le graphe
  status text CHECK (status IN ('todo','in_progress','blocked','done')) DEFAULT 'todo',
  position integer DEFAULT 0,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  UNIQUE(submission_id, module_uuid)
);

-- Vue kanban_user_modules_v1 : lecture unifiée Kanban
CREATE VIEW kanban_user_modules_v1 AS
SELECT 
  fms.id as status_id,
  fms.user_id,
  fms.submission_id,
  fms.module_uuid,
  fms.status,
  fms.position,
  null::text as title,        -- Enrichi côté client via builder_modules
  null::text as description,
  null::integer as duration
FROM formation_module_statuses fms;
```

### Tables de support
```sql
-- NEEDS-VERIFY Tables soumissions (formation_submissions ou user_formation_submissions ?)
-- NEEDS-VERIFY Table user_formations pour statuts utilisateur ?
-- NEEDS-VERIFY Table user_formation_snapshots pour snapshots figés ?

-- Tables catalogue builder (existantes)
builder_families, builder_subfamilies, builder_modules  -- Hiérarchie modules
```

### Index et contraintes
```sql
-- Index formation_module_statuses
CREATE UNIQUE INDEX idx_fms_submission_module ON formation_module_statuses (submission_id, module_uuid);
CREATE INDEX idx_fms_user_submission ON formation_module_statuses (user_id, submission_id);
CREATE INDEX idx_fms_submission_position ON formation_module_statuses (submission_id, position);
```

<!-- ANCHOR:FORMATIONS_SERVICES -->
## Services et endpoints - Module Formations
### RPCs Supabase principales
```sql
-- RPC client : récupérer formations utilisateur
get_user_courses_and_parcours(p_user_id uuid)
-- Retour : formations inscrites + parcours custom de l'utilisateur

-- RPC admin : récupérer formations + soumissions
get_admin_formations_and_submissions()
-- Retour : toutes formations + soumissions clients (avec displayId unique)

-- RPC soumission : soumettre parcours pour validation
submit_user_parcours_for_validation(p_course_id uuid)
-- NEEDS-VERIFY Existe ? Crée formation_submissions avec snapshot

-- RPC validation : approuver soumission
approve_user_parcours_submission(p_submission_id uuid)
-- NEEDS-VERIFY Existe ? Initialise Kanban + user_formations

-- RPC Kanban : initialiser statuts modules
init_kanban_statuses_for_submission(p_submission_id uuid)
-- Crée formation_module_statuses depuis snapshot figé
```

### API REST utilisées
```javascript
// Formations catalogue (public)
supabase.from('courses')
  .select('*')
  .eq('course_type', 'standard')
  .eq('status', 'live')

// Parcours utilisateur (authentifié)
supabase.from('courses')
  .select('*')
  .eq('author_id', user.id)
  .eq('course_type', 'custom')

// Kanban modules (RLS user_id)
supabase.from('kanban_user_modules_v1')
  .select('*')
  .eq('user_id', user.id)

// Mise à jour statut module Kanban
supabase.from('formation_module_statuses')
  .update({ status: 'done', position: 2 })
  .eq('id', statusId)
```

### Realtime subscriptions
```javascript
// Synchronisation Kanban temps réel
supabase.channel(`user-kanban-channel-${user.id}`)
  .on('postgres_changes', {
    event: '*',
    schema: 'public', 
    table: 'formation_module_statuses',
    filter: `user_id=eq.${user.id}`
  }, () => refetchKanban())
```

<!-- ANCHOR:FORMATIONS_SCRIPTS -->
## Scripts et workflows - Module Formations
### Scripts npm
```bash
npm run dev          # Serveur développement (builder + formations)
npm run build        # Build production (inclut assets formations)
npm run preview      # Preview build (test formations)
npm run db:query     # Exécution SQL (migrations formations)
npm run db:file      # Exécution fichier SQL
```

### Migrations Supabase
```
Supabase/migrations/
├── 2025-09-08_formation_module_statuses.sql    # Table Kanban
├── 2025-09-08_kanban_user_modules_v1.sql       # Vue unifiée Kanban  
├── 2025-09-08_init_fms.sql                     # RPC init Kanban
├── 2025-09-08_fms_policies.sql                 # Politiques RLS
└── 2025-09-17_enable_realtime_fms.sql          # Realtime Kanban
```

### CI/CD spécifique formations
- Build inclut assets builder (ReactFlow, modules catalog)
- Variables d'environnement : `VITE_SUPABASE_*` pour connexion formations
- Tests : NEEDS-VERIFY Tests automatisés formations ?

<!-- ANCHOR:FORMATIONS_AI_RULES -->
## Règles d'intervention IA - Module Formations
### Modifications autorisées
- **UI/UX** : Composants formation, builder, Kanban (src/components/formation/, src/components/builder/, src/components/kanban/)
- **Logique client** : Hooks formations (src/hooks/useFormationBuilder.js), API calls (src/lib/builder/)
- **Styles** : CSS formations, animations, responsive design
- **Permissions** : Ajout permissions formations dans role_permissions

### Modifications interdites sans validation
- **Schéma DB** : Tables courses, formation_module_statuses (risque corruption données)
- **RPCs critiques** : submit_*, approve_*, init_kanban_* (logique métier sensible)
- **Snapshots** : Logique figement parcours (intégrité données)
- **RLS policies** : Sécurité accès formations

### Bonnes pratiques
- Utiliser `supabase` de `@/lib/customSupabaseClient` (singleton configuré)
- Respecter cycle de vie : draft → soumission → validation → Kanban live
- Préserver `displayId` unique pour éviter collisions courses/submissions
- Invalider caches après mutations critiques (`queryClient.invalidateQueries`)

<!-- ANCHOR:FORMATIONS_LIMITS -->
## Limites et points d'attention - Module Formations
### Edge cases identifiés
- **Snapshot timing** : Parcours modifié entre soumission et validation → snapshot obsolète
- **Kanban orphelin** : Suppression formation après création Kanban → modules orphelins
- **Permissions drift** : Changement rôle utilisateur → accès builder incohérent
- **Realtime lag** : Kanban multi-onglets → états désynchronisés temporairement

### Performance
- **Catalogue builder** : Filtrage côté client des modules autorisés (peut être lent si >1000 modules)
- **Kanban queries** : Index sur (user_id, submission_id) critique pour performance
- **ReactFlow** : Graphes >100 nœuds peuvent ralentir le builder

### Cohérence données
- **Statuts formations** : Vérifier cohérence course.status vs user_formation.status
- **Module IDs** : UUIDs modules doivent être stables entre snapshot et live
- **RLS enforcement** : Politiques formation_module_statuses critiques pour isolation utilisateurs

### Points techniques
- **Encoding** : Certains fichiers contiennent caractères étendus (risque corruption UTF-8)
- **Error handling** : Gestion erreurs RPCs formations à améliorer (fallbacks)
- **Type safety** : NEEDS-VERIFY TypeScript pour interfaces formations ?

<!-- ANCHOR:FORMATIONS_CHANGELOG -->
## Changelog - Module Formations
### 2025-01-18
- **Documentation** : Création documentation complète module Formations après analyse dépôt
- **Architecture** : Identification workflow soumission/validation avec système snapshot
- **Kanban** : Documentation système temps réel avec formation_module_statuses + vue unifiée
- **Builder** : Documentation builder ReactFlow avec catalogue modules filtré
- **Admin** : Documentation interface gestion formations/soumissions avec displayId unique

<!-- ANCHOR:STRUCTURE -->
## Structure des dossiers
- src/ code applicatif React.
  - src/components/ composants UI (dashboard, admin, builder, home, chat, forum, kanban, ui shadcn).
  - src/contexts/ providers (auth Supabase, permissions, builder catalog, chat, themes, etats partages).
  - src/lib/ utilitaires client (customSupabaseClient, chatApi, builder/parcoursApi, reactQueryClient, sessionRefreshBus).
  - src/pages/ routes React (public, client, admin, builder, forum, chat, tickets).
  - src/hooks/ hooks pour layout dashboard et builder.
  - src/data/ jeux de donnees statiques (ex: countries.json).
- Supabase/ ressources backend.
  - Supabase/functions/ edge functions Deno (get-dashboard-layout, update-dashboard-layout, create-user-with-role, create-admin-user, set-user-password, users-search, content-blocks-search, manage-content-block).
  - Supabase/migrations/ scripts SQL idempotents (formation_module_statuses, policies, kanban vues, triggers).
- sql/ requetes et correctifs ad hoc (inventory.sql, create_home_blocks_functions.sql, deploy_home_blocks_functions.sql, create_action_logs_table.sql).
- database/ scripts supp (ex: add_homepage_module.sql).
- scripts/ outils Node (run-sql.js).
- .github/workflows/deploy.yml pipeline GitHub Actions (build + FTPS Hostinger).
- public/, dist/, .vite/ assets generes.

<!-- ANCHOR:AUTH -->
## Authentification et permissions
- src/lib/customSupabaseClient.js cree un client unique avec ajout automatique d'en-tete apikey, timeout reseau (8s) et ajout du parametre apikey aux requetes REST v1.
- src/contexts/SupabaseAuthContext.jsx gere session, rafraichissements (via emitSessionRefresh), fetch profile (profiles et user_types), detection de tab inactive et forcer la deconnexion si aucun access token valide.
- Auth expose signInWithPassword, signUp, signOut, refreshUser; les inscriptions ecrivent metadata first_name et last_name et attendent la creation du profil.
- src/contexts/PermissionsContext.jsx recupere les permissions via role_permissions, met en cache localStorage 5 min, gere fallback offline et invalide lors des evenements session refresh.
- Gardes de routes:
  - ProtectedRoute applique authReady, verifie allowedUserTypes et requiredPermission (avec bypass owner et exceptions builder/ticket self-guard).
  - ClientOnlyRoute cible client, vip, guest; redirige les roles admin vers /admin/dashboard si admin:access_dashboard present.
  - PublicOnlyRoute bloque l'acces login/register si utilisateur connecte.
- Roles observes: owner, admin, prof, client, vip, guest; owner bypass toutes permissions (cf. PermissionsContext).

<!-- ANCHOR:DATA -->
## Modele de donnees avec tables cles
| Table | Usage principal | Champs observes | Sources |
| --- | --- | --- | --- |
| profiles | Profil utilisateur (nom, avatar, type) | first_name, last_name, avatar_url, user_type_id, relation user_types | src/contexts/SupabaseAuthContext.jsx ; src/components/account/AvatarUpload.jsx |
| user_types | Types d'utilisateurs | id, type_name, display_name | src/components/admin/UserManagementPanel.jsx |
| role_permissions | Permissions par type | permission et colonnes booleennes par role | src/contexts/PermissionsContext.jsx |
| courses | Formations standard/custom | id, title, course_type, status, nodes, edges, author_id | src/lib/builder/parcoursApi.js ; src/components/dashboard/modules/FormationsPanel.jsx |
| user_courses | Statut formation x utilisateur | course_id, user_id, status, enrolled_at | src/components/dashboard/modules/FormationsPanel.jsx |
| builder_families / builder_subfamilies / builder_modules | Catalogue builder hierarchique | display_order, name, modules enfants | src/contexts/BuilderCatalogContext.jsx ; src/lib/builder/parcoursApi.js |
| modules_registry | Catalogue modules dashboard (client/admin) | module_key, is_active, default_layout.span, required_permission | src/hooks/useDashboardLayout.js ; src/components/dashboard/ClientDashboardContent.jsx |
| admin_dashboard_tabs | Configuration onglets back-office | row_order, col_order, tab_key | src/pages/admin/DashboardEditorPage.jsx |
| resources | Ressources (fichiers ou liens) | id, name, type, format, url, file_path, content | src/components/dashboard/modules/ResourcesPanel.jsx ; src/components/admin/NewResourceDialog.jsx |
| resource_assignments / resource_ratings | Assignations et notes utilisateur | resource_id, user_id, score, commentaire | src/components/dashboard/modules/ResourcesPanel.jsx |
| chat_conversations / chat_messages | Chat support temps reel | guest_id, guest_email, status, file_url, resource_id, sender | src/lib/chatApi.js ; src/pages/admin/AdminLiveChatPage.jsx |
| tickets | Support ticketing | title, content, status, assigned_to | src/pages/CreateTicketPage.jsx ; src/pages/TicketDetailPage.jsx |
| formation_module_statuses | Avancement modules par soumission | submission_id, module_uuid, status, position, timestamps | Supabase/migrations/2025-09-08_formation_module_statuses.sql |

<!-- ANCHOR:SERVICES -->
## Services et endpoints avec exemples
- Routes React Router (voir src/App.jsx):
  | Chemin | Garde | Component / permission |
  | --- | --- | --- |
  | /forum | ProtectedRoute | ForumPage (forum:view) |
  | /forum/topic/new | ProtectedRoute | CreateForumTopicPage (forum:create_topic) |
  | /dashboard | ClientOnlyRoute | DashboardPage |
  | /compte-client | ClientOnlyRoute | ClientAccountPage |
  | /chat | ProtectedRoute | ChatPage (chat:view) |
  | /nouveau-ticket | ProtectedRoute | CreateTicketPage (tickets:create) |
  | /ticket/:id | ProtectedRoute | TicketDetailPage (tickets:view_own) |
  | /formation-builder/:id | ProtectedRoute | FormationBuilderPage (builder:edit_own_parcours) |
  | /admin/dashboard | ProtectedRoute | AdminDashboardPage (admin:access_dashboard) |
  | /admin/live-chat | ProtectedRoute | AdminLiveChatPage (chat:view_all) |
  | /admin/modules | ProtectedRoute | ModuleManagerPage (admin:manage_modules) |

- RPC Supabase utilisees dans src/ :
  - get_user_courses_and_parcours, submit_user_parcours_for_validation, get_user_resources_with_ratings, get_admin_dashboard_kpis, get_admin_formations_and_submissions, get_chat_conversations_with_details, search_content_blocks, search_users, set_active_theme, snapshot_and_init_kanban, cleanup_orphan_kanban_for_user.
  - Exemple d'appel dans src/components/dashboard/modules/FormationsPanel.jsx :
        const { data, error } = await supabase.rpc('get_user_courses_and_parcours', {
          p_user_id: user.id,
        });
- Edge Functions (Supabase/functions/), invoquees via supabase.functions.invoke avec payload JSON :
  - get-dashboard-layout et update-dashboard-layout pour lire ou ecrire dashboard_layouts (useDashboardLayout.js et pages/admin/DashboardEditorPage.jsx).
  - users-search pour lister et filtrer les utilisateurs (components/admin/UserManagementPanel.jsx).
  - create-user-with-role, create-admin-user, set-user-password pour la gestion des comptes avec cle service role.
  - content-blocks-search et manage-content-block pour rechercher et editer content_blocks (pages/admin/EditHomeBlockPage.jsx).
- Storage Supabase :
  - Bucket avatars gere dans src/components/account/AvatarUpload.jsx (suppression ancien fichier avant upload, mise a jour profiles.avatar_url).
  - Bucket chat_attachments pour partage de fichiers chat (src/lib/chatApi.js).
  - Bucket resources pour documents de la bibliotheque (src/components/dashboard/modules/ResourcesPanel.jsx).
- Realtime :
  - src/contexts/BuilderCatalogContext.jsx et src/components/dashboard/modules/ResourcesPanel.jsx ouvrent des canaux supabase.channel(...) pour synchroniser familles/modules, ressources et evaluations.

<!-- ANCHOR:SCRIPTS -->
## Scripts et workflows
- Scripts npm (package.json) :
  - npm run dev (Vite dev server).
  - npm run build (build production Vite).
  - npm run preview (serveur preview Vite).
  - npm run db:query "<SQL>" / npm run db:file <path> (execution Postgres via scripts/run-sql.js avec cred .env.local ou DATABASE_URL).
- Scripts shells : deploy.sh et deploy.bat reconstruisent dist/ et listent les assets.
- CI/CD GitHub Actions (.github/workflows/deploy.yml) :
  - Declenchement sur push de tags v*.
  - Etapes : checkout, verif secrets requis (FTP_*, VITE_SUPABASE_*), Node 20, npm ci, npm run build, verification dist/index.html, deploiement FTPS via SamKirkland/FTP-Deploy-Action (mode dangerous-clean-slate).

<!-- ANCHOR:AI_RULES -->
## Regles d'intervention pour l'IA
- Reutiliser l'instance supabase exportee par customSupabaseClient pour beneficier des en-tetes automatiques, du timeout et du singleton GoTrue.
- Respecter authReady et authLoading avant d'afficher ou d'appliquer des redirections; eviter d'introduire un spinner permanent en cas de changement d'onglet.
- Pour les droits, utiliser usePermissions().hasPermission et mettre a jour role_permissions ou modules_registry.required_permission afin d'alimenter les gardes existantes.
- Invalider les caches via emitSessionRefresh ou queryClient.invalidateQueries() apres une mise a jour critique (profil, permissions, layout) pour rester aligne avec les contexts actuels.
- Toute logique admin sensible doit passer par une edge function ou un RPC cote base; ne jamais exposer SUPABASE_SERVICE_ROLE dans du code client.
- Conserver le nommage snake_case et les prefixes get_/set_/search_ pour de nouvelles fonctions SQL, et loger les migrations dans Supabase/migrations/.

<!-- ANCHOR:LIMITS -->
## Limites et points d'attention
- src/components/dashboard/modules/FormationsPanel.jsx:78 utilise enrolled_at comme proxy pour la date "go live" (TODO en commentaire) : mettre a jour des que la colonne cible sera disponible.
- Supabase/functions/set-user-password/index.ts force actuellement le mot de passe Password123! avant d'envoyer un courriel de reset : durcir ce flux avant usage production.
- .env.local contient la cle SUPABASE_SERVICE_ROLE commitee; verifier que le build frontend ne l'embarque pas et restreindre la diffusion du fichier.
- Supabase/functions/update-dashboard-layout/index.ts supprime puis reinserre pour contourner un trigger ON UPDATE defectueux : reviser le trigger ou ajuster la logique pour eviter des fenetres de consistance.
- Certains fichiers (ex: src/contexts/SupabaseAuthContext.jsx) contiennent des caracteres etendus signes d'encodage degrade NEEDS-VERIFY Confirmer l'encodage avant edition pour eviter perte de texte.

<!-- ANCHOR:CHANGELOG -->
## Changelog
- 2025-09-17 : Mise a jour complete du guide apres audit du depot (stack, routes, data, workflows, risques).
