---
title: "NotionLab Guide IA"
version: "1"
date: "2025-09-17"
commit: "8e212cc9a62c4696634eb9d79729f91743c23b48"
owner: "NEEDS-VERIFY Provide owner or primary contact."
---

<!-- ANCHOR:OVERVIEW -->
## Vue d'ensemble
- Application React 18 servie par Vite 7 (SPA) avec routing declare dans src/App.jsx couvrant site public, dashboard client, outils admin et builder de parcours.
- Supabase (Postgres, Auth, Storage, Realtime) est la source de donnees; un client unique est instancie via src/lib/customSupabaseClient.js et reexporte par src/lib/supabasClient.js.
- Les contexts globaux (SupabaseAuthContext, PermissionsContext, ComponentStateContext, ChatContext, ResourceCreationContext, BuilderCatalogContext, ThemeContext) enveloppent le router et centralisent session, droits, etats UI et caches.
- Les modules metiers principaux: formations (custom et standard), ressources partagees, support (tickets, chat), forum et mise en page dashboard configurable.

<!-- ANCHOR:STACK -->
## Stack et versions
| Element | Version active | Reference |
| --- | --- | --- |
| Node.js | 20.19.1 (min >=18) | .nvmrc ; package.json (engines.node) |
| Vite | 7.1.5 | package.json |
| React | 18.2.0 | package.json |
| @supabase/supabase-js | 2.57.4 (declared ^2.30.0) | package-lock.json |
| @tanstack/react-query | 5.89.0 | package.json |
| Tailwind CSS | 3.3.3 + typography 0.5.13 | package.json ; tailwind.config.js |
| dnd-kit (core/sortable/modifiers) | 6.1.0 / 8.0.0 / 7.0.0 | package.json |
| Radix UI | 1.x composants React | package.json ; src/components/ui/ |

Variables d'environnement observees:
| cle | Usage |
| --- | --- |
| VITE_SUPABASE_URL | URL du projet Supabase (frontend) |
| VITE_SUPABASE_ANON_KEY | Cle anon (frontend) |
| SUPABASE_SERVICE_ROLE | Cle service role pour scripts locaux (.env.local) |
| PGHOST, PGPORT, PGDATABASE, PGUSER, PGPASSWORD | Connexion Postgres pour scripts/run-sql.js |
| DATABASE_URL | Alternative unique pour run-sql (optionnelle) |

<!-- ANCHOR:STRUCTURE -->
## Structure des dossiers
- src/ code applicatif React.
  - src/components/ composants UI (dashboard, admin, builder, home, chat, forum, kanban, ui shadcn).
  - src/contexts/ providers (auth Supabase, permissions, builder catalog, chat, themes, etats partages).
  - src/lib/ utilitaires client (customSupabaseClient, chatApi, builder/parcoursApi, reactQueryClient, sessionRefreshBus).
  - src/pages/ routes React (public, client, admin, builder, forum, chat, tickets).
  - src/hooks/ hooks pour layout dashboard et builder.
  - src/data/ jeux de donnees statiques (ex: countries.json).
- Supabase/ ressources backend.
  - Supabase/functions/ edge functions Deno (get-dashboard-layout, update-dashboard-layout, create-user-with-role, create-admin-user, set-user-password, users-search, content-blocks-search, manage-content-block).
  - Supabase/migrations/ scripts SQL idempotents (formation_module_statuses, policies, kanban vues, triggers).
- sql/ requetes et correctifs ad hoc (inventory.sql, create_home_blocks_functions.sql, deploy_home_blocks_functions.sql, create_action_logs_table.sql).
- database/ scripts supp (ex: add_homepage_module.sql).
- scripts/ outils Node (run-sql.js).
- .github/workflows/deploy.yml pipeline GitHub Actions (build + FTPS Hostinger).
- public/, dist/, .vite/ assets generes.

<!-- ANCHOR:AUTH -->
## Authentification et permissions
- src/lib/customSupabaseClient.js cree un client unique avec ajout automatique d'en-tete apikey, timeout reseau (8s) et ajout du parametre apikey aux requetes REST v1.
- src/contexts/SupabaseAuthContext.jsx gere session, rafraichissements (via emitSessionRefresh), fetch profile (profiles et user_types), detection de tab inactive et forcer la deconnexion si aucun access token valide.
- Auth expose signInWithPassword, signUp, signOut, refreshUser; les inscriptions ecrivent metadata first_name et last_name et attendent la creation du profil.
- src/contexts/PermissionsContext.jsx recupere les permissions via role_permissions, met en cache localStorage 5 min, gere fallback offline et invalide lors des evenements session refresh.
- Gardes de routes:
  - ProtectedRoute applique authReady, verifie allowedUserTypes et requiredPermission (avec bypass owner et exceptions builder/ticket self-guard).
  - ClientOnlyRoute cible client, vip, guest; redirige les roles admin vers /admin/dashboard si admin:access_dashboard present.
  - PublicOnlyRoute bloque l'acces login/register si utilisateur connecte.
- Roles observes: owner, admin, prof, client, vip, guest; owner bypass toutes permissions (cf. PermissionsContext).

<!-- ANCHOR:DATA -->
## Modele de donnees avec tables cles
| Table | Usage principal | Champs observes | Sources |
| --- | --- | --- | --- |
| profiles | Profil utilisateur (nom, avatar, type) | first_name, last_name, avatar_url, user_type_id, relation user_types | src/contexts/SupabaseAuthContext.jsx ; src/components/account/AvatarUpload.jsx |
| user_types | Types d'utilisateurs | id, type_name, display_name | src/components/admin/UserManagementPanel.jsx |
| role_permissions | Permissions par type | permission et colonnes booleennes par role | src/contexts/PermissionsContext.jsx |
| courses | Formations standard/custom | id, title, course_type, status, nodes, edges, author_id | src/lib/builder/parcoursApi.js ; src/components/dashboard/modules/FormationsPanel.jsx |
| user_courses | Statut formation x utilisateur | course_id, user_id, status, enrolled_at | src/components/dashboard/modules/FormationsPanel.jsx |
| builder_families / builder_subfamilies / builder_modules | Catalogue builder hierarchique | display_order, name, modules enfants | src/contexts/BuilderCatalogContext.jsx ; src/lib/builder/parcoursApi.js |
| modules_registry | Catalogue modules dashboard (client/admin) | module_key, is_active, default_layout.span, required_permission | src/hooks/useDashboardLayout.js ; src/components/dashboard/ClientDashboardContent.jsx |
| admin_dashboard_tabs | Configuration onglets back-office | row_order, col_order, tab_key | src/pages/admin/DashboardEditorPage.jsx |
| resources | Ressources (fichiers ou liens) | id, name, type, format, url, file_path, content | src/components/dashboard/modules/ResourcesPanel.jsx ; src/components/admin/NewResourceDialog.jsx |
| resource_assignments / resource_ratings | Assignations et notes utilisateur | resource_id, user_id, score, commentaire | src/components/dashboard/modules/ResourcesPanel.jsx |
| chat_conversations / chat_messages | Chat support temps reel | guest_id, guest_email, status, file_url, resource_id, sender | src/lib/chatApi.js ; src/pages/admin/AdminLiveChatPage.jsx |
| tickets | Support ticketing | title, content, status, assigned_to | src/pages/CreateTicketPage.jsx ; src/pages/TicketDetailPage.jsx |
| formation_module_statuses | Avancement modules par soumission | submission_id, module_uuid, status, position, timestamps | Supabase/migrations/2025-09-08_formation_module_statuses.sql |

<!-- ANCHOR:SERVICES -->
## Services et endpoints avec exemples
- Routes React Router (voir src/App.jsx):
  | Chemin | Garde | Component / permission |
  | --- | --- | --- |
  | /forum | ProtectedRoute | ForumPage (forum:view) |
  | /forum/topic/new | ProtectedRoute | CreateForumTopicPage (forum:create_topic) |
  | /dashboard | ClientOnlyRoute | DashboardPage |
  | /compte-client | ClientOnlyRoute | ClientAccountPage |
  | /chat | ProtectedRoute | ChatPage (chat:view) |
  | /nouveau-ticket | ProtectedRoute | CreateTicketPage (tickets:create) |
  | /ticket/:id | ProtectedRoute | TicketDetailPage (tickets:view_own) |
  | /formation-builder/:id | ProtectedRoute | FormationBuilderPage (builder:edit_own_parcours) |
  | /admin/dashboard | ProtectedRoute | AdminDashboardPage (admin:access_dashboard) |
  | /admin/live-chat | ProtectedRoute | AdminLiveChatPage (chat:view_all) |
  | /admin/modules | ProtectedRoute | ModuleManagerPage (admin:manage_modules) |

- RPC Supabase utilisees dans src/ :
  - get_user_courses_and_parcours, submit_user_parcours_for_validation, get_user_resources_with_ratings, get_admin_dashboard_kpis, get_admin_formations_and_submissions, get_chat_conversations_with_details, search_content_blocks, search_users, set_active_theme, snapshot_and_init_kanban, cleanup_orphan_kanban_for_user.
  - Exemple d'appel dans src/components/dashboard/modules/FormationsPanel.jsx :
        const { data, error } = await supabase.rpc('get_user_courses_and_parcours', {
          p_user_id: user.id,
        });
- Edge Functions (Supabase/functions/), invoquees via supabase.functions.invoke avec payload JSON :
  - get-dashboard-layout et update-dashboard-layout pour lire ou ecrire dashboard_layouts (useDashboardLayout.js et pages/admin/DashboardEditorPage.jsx).
  - users-search pour lister et filtrer les utilisateurs (components/admin/UserManagementPanel.jsx).
  - create-user-with-role, create-admin-user, set-user-password pour la gestion des comptes avec cle service role.
  - content-blocks-search et manage-content-block pour rechercher et editer content_blocks (pages/admin/EditHomeBlockPage.jsx).
- Storage Supabase :
  - Bucket avatars gere dans src/components/account/AvatarUpload.jsx (suppression ancien fichier avant upload, mise a jour profiles.avatar_url).
  - Bucket chat_attachments pour partage de fichiers chat (src/lib/chatApi.js).
  - Bucket resources pour documents de la bibliotheque (src/components/dashboard/modules/ResourcesPanel.jsx).
- Realtime :
  - src/contexts/BuilderCatalogContext.jsx et src/components/dashboard/modules/ResourcesPanel.jsx ouvrent des canaux supabase.channel(...) pour synchroniser familles/modules, ressources et evaluations.

<!-- ANCHOR:SCRIPTS -->
## Scripts et workflows
- Scripts npm (package.json) :
  - npm run dev (Vite dev server).
  - npm run build (build production Vite).
  - npm run preview (serveur preview Vite).
  - npm run db:query "<SQL>" / npm run db:file <path> (execution Postgres via scripts/run-sql.js avec cred .env.local ou DATABASE_URL).
- Scripts shells : deploy.sh et deploy.bat reconstruisent dist/ et listent les assets.
- CI/CD GitHub Actions (.github/workflows/deploy.yml) :
  - Declenchement sur push de tags v*.
  - Etapes : checkout, verif secrets requis (FTP_*, VITE_SUPABASE_*), Node 20, npm ci, npm run build, verification dist/index.html, deploiement FTPS via SamKirkland/FTP-Deploy-Action (mode dangerous-clean-slate).

<!-- ANCHOR:AI_RULES -->
## Regles d'intervention pour l'IA
- Reutiliser l'instance supabase exportee par customSupabaseClient pour beneficier des en-tetes automatiques, du timeout et du singleton GoTrue.
- Respecter authReady et authLoading avant d'afficher ou d'appliquer des redirections; eviter d'introduire un spinner permanent en cas de changement d'onglet.
- Pour les droits, utiliser usePermissions().hasPermission et mettre a jour role_permissions ou modules_registry.required_permission afin d'alimenter les gardes existantes.
- Invalider les caches via emitSessionRefresh ou queryClient.invalidateQueries() apres une mise a jour critique (profil, permissions, layout) pour rester aligne avec les contexts actuels.
- Toute logique admin sensible doit passer par une edge function ou un RPC cote base; ne jamais exposer SUPABASE_SERVICE_ROLE dans du code client.
- Conserver le nommage snake_case et les prefixes get_/set_/search_ pour de nouvelles fonctions SQL, et loger les migrations dans Supabase/migrations/.

<!-- ANCHOR:LIMITS -->
## Limites et points d'attention
- src/components/dashboard/modules/FormationsPanel.jsx:78 utilise enrolled_at comme proxy pour la date "go live" (TODO en commentaire) : mettre a jour des que la colonne cible sera disponible.
- Supabase/functions/set-user-password/index.ts force actuellement le mot de passe Password123! avant d'envoyer un courriel de reset : durcir ce flux avant usage production.
- .env.local contient la cle SUPABASE_SERVICE_ROLE commitee; verifier que le build frontend ne l'embarque pas et restreindre la diffusion du fichier.
- Supabase/functions/update-dashboard-layout/index.ts supprime puis reinserre pour contourner un trigger ON UPDATE defectueux : reviser le trigger ou ajuster la logique pour eviter des fenetres de consistance.
- Certains fichiers (ex: src/contexts/SupabaseAuthContext.jsx) contiennent des caracteres etendus signes d'encodage degrade NEEDS-VERIFY Confirmer l'encodage avant edition pour eviter perte de texte.

<!-- ANCHOR:CHANGELOG -->
## Changelog
- 2025-09-17 : Mise a jour complete du guide apres audit du depot (stack, routes, data, workflows, risques).
